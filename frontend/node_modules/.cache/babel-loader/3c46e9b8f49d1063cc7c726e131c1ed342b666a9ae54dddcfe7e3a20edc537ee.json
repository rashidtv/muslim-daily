{"ast":null,"code":"/* eslint-disable max-params, max-lines */\nimport { dateByAddingSeconds } from './DateUtils';\nimport { degreesToRadians, normalizeToScale, quadrantShiftAngle, radiansToDegrees, unwindAngle } from './MathUtils';\nimport { Shafaq } from './Shafaq';\nconst Astronomical = {\n  /* The geometric mean longitude of the sun in degrees. */\n  meanSolarLongitude(julianCentury) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 163 */\n\n    const term1 = 280.4664567;\n    const term2 = 36000.76983 * T;\n    const term3 = 0.0003032 * Math.pow(T, 2);\n    const L0 = term1 + term2 + term3;\n    return unwindAngle(L0);\n  },\n  /* The geometric mean longitude of the moon in degrees. */\n  meanLunarLongitude(julianCentury) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 144 */\n\n    const term1 = 218.3165;\n    const term2 = 481267.8813 * T;\n    const Lp = term1 + term2;\n    return unwindAngle(Lp);\n  },\n  ascendingLunarNodeLongitude(julianCentury) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 144 */\n\n    const term1 = 125.04452;\n    const term2 = 1934.136261 * T;\n    const term3 = 0.0020708 * Math.pow(T, 2);\n    const term4 = Math.pow(T, 3) / 450000;\n    const Omega = term1 - term2 + term3 + term4;\n    return unwindAngle(Omega);\n  },\n  /* The mean anomaly of the sun. */\n  meanSolarAnomaly(julianCentury) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 163 */\n\n    const term1 = 357.52911;\n    const term2 = 35999.05029 * T;\n    const term3 = 0.0001537 * Math.pow(T, 2);\n    const M = term1 + term2 - term3;\n    return unwindAngle(M);\n  },\n  /* The Sun's equation of the center in degrees. */\n  solarEquationOfTheCenter(julianCentury, meanAnomaly) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 164 */\n\n    const Mrad = degreesToRadians(meanAnomaly);\n    const term1 = (1.914602 - 0.004817 * T - 0.000014 * Math.pow(T, 2)) * Math.sin(Mrad);\n    const term2 = (0.019993 - 0.000101 * T) * Math.sin(2 * Mrad);\n    const term3 = 0.000289 * Math.sin(3 * Mrad);\n    return term1 + term2 + term3;\n  },\n  /* The apparent longitude of the Sun, referred to the\n        true equinox of the date. */\n  apparentSolarLongitude(julianCentury, meanLongitude) {\n    const T = julianCentury;\n    const L0 = meanLongitude;\n    /* Equation from Astronomical Algorithms page 164 */\n\n    const longitude = L0 + Astronomical.solarEquationOfTheCenter(T, Astronomical.meanSolarAnomaly(T));\n    const Omega = 125.04 - 1934.136 * T;\n    const Lambda = longitude - 0.00569 - 0.00478 * Math.sin(degreesToRadians(Omega));\n    return unwindAngle(Lambda);\n  },\n  /* The mean obliquity of the ecliptic, formula\n        adopted by the International Astronomical Union.\n        Represented in degrees. */\n  meanObliquityOfTheEcliptic(julianCentury) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 147 */\n\n    const term1 = 23.439291;\n    const term2 = 0.013004167 * T;\n    const term3 = 0.0000001639 * Math.pow(T, 2);\n    const term4 = 0.0000005036 * Math.pow(T, 3);\n    return term1 - term2 - term3 + term4;\n  },\n  /* The mean obliquity of the ecliptic, corrected for\n        calculating the apparent position of the sun, in degrees. */\n  apparentObliquityOfTheEcliptic(julianCentury, meanObliquityOfTheEcliptic) {\n    const T = julianCentury;\n    const Epsilon0 = meanObliquityOfTheEcliptic;\n    /* Equation from Astronomical Algorithms page 165 */\n\n    const O = 125.04 - 1934.136 * T;\n    return Epsilon0 + 0.00256 * Math.cos(degreesToRadians(O));\n  },\n  /* Mean sidereal time, the hour angle of the vernal equinox, in degrees. */\n  meanSiderealTime(julianCentury) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 165 */\n\n    const JD = T * 36525 + 2451545.0;\n    const term1 = 280.46061837;\n    const term2 = 360.98564736629 * (JD - 2451545);\n    const term3 = 0.000387933 * Math.pow(T, 2);\n    const term4 = Math.pow(T, 3) / 38710000;\n    const Theta = term1 + term2 + term3 - term4;\n    return unwindAngle(Theta);\n  },\n  nutationInLongitude(julianCentury, solarLongitude, lunarLongitude, ascendingNode) {\n    const L0 = solarLongitude;\n    const Lp = lunarLongitude;\n    const Omega = ascendingNode;\n    /* Equation from Astronomical Algorithms page 144 */\n\n    const term1 = -17.2 / 3600 * Math.sin(degreesToRadians(Omega));\n    const term2 = 1.32 / 3600 * Math.sin(2 * degreesToRadians(L0));\n    const term3 = 0.23 / 3600 * Math.sin(2 * degreesToRadians(Lp));\n    const term4 = 0.21 / 3600 * Math.sin(2 * degreesToRadians(Omega));\n    return term1 - term2 - term3 + term4;\n  },\n  nutationInObliquity(julianCentury, solarLongitude, lunarLongitude, ascendingNode) {\n    const L0 = solarLongitude;\n    const Lp = lunarLongitude;\n    const Omega = ascendingNode;\n    /* Equation from Astronomical Algorithms page 144 */\n\n    const term1 = 9.2 / 3600 * Math.cos(degreesToRadians(Omega));\n    const term2 = 0.57 / 3600 * Math.cos(2 * degreesToRadians(L0));\n    const term3 = 0.1 / 3600 * Math.cos(2 * degreesToRadians(Lp));\n    const term4 = 0.09 / 3600 * Math.cos(2 * degreesToRadians(Omega));\n    return term1 + term2 + term3 - term4;\n  },\n  altitudeOfCelestialBody(observerLatitude, declination, localHourAngle) {\n    const Phi = observerLatitude;\n    const delta = declination;\n    const H = localHourAngle;\n    /* Equation from Astronomical Algorithms page 93 */\n\n    const term1 = Math.sin(degreesToRadians(Phi)) * Math.sin(degreesToRadians(delta));\n    const term2 = Math.cos(degreesToRadians(Phi)) * Math.cos(degreesToRadians(delta)) * Math.cos(degreesToRadians(H));\n    return radiansToDegrees(Math.asin(term1 + term2));\n  },\n  approximateTransit(longitude, siderealTime, rightAscension) {\n    const L = longitude;\n    const Theta0 = siderealTime;\n    const a2 = rightAscension;\n    /* Equation from page Astronomical Algorithms 102 */\n\n    const Lw = L * -1;\n    return normalizeToScale((a2 + Lw - Theta0) / 360, 1);\n  },\n  /* The time at which the sun is at its highest point in the sky (in universal time) */\n  correctedTransit(approximateTransit, longitude, siderealTime, rightAscension, previousRightAscension, nextRightAscension) {\n    const m0 = approximateTransit;\n    const L = longitude;\n    const Theta0 = siderealTime;\n    const a2 = rightAscension;\n    const a1 = previousRightAscension;\n    const a3 = nextRightAscension;\n    /* Equation from page Astronomical Algorithms 102 */\n\n    const Lw = L * -1;\n    const Theta = unwindAngle(Theta0 + 360.985647 * m0);\n    const a = unwindAngle(Astronomical.interpolateAngles(a2, a1, a3, m0));\n    const H = quadrantShiftAngle(Theta - Lw - a);\n    const dm = H / -360;\n    return (m0 + dm) * 24;\n  },\n  correctedHourAngle(approximateTransit, angle, coordinates, afterTransit, siderealTime, rightAscension, previousRightAscension, nextRightAscension, declination, previousDeclination, nextDeclination) {\n    const m0 = approximateTransit;\n    const h0 = angle;\n    const Theta0 = siderealTime;\n    const a2 = rightAscension;\n    const a1 = previousRightAscension;\n    const a3 = nextRightAscension;\n    const d2 = declination;\n    const d1 = previousDeclination;\n    const d3 = nextDeclination;\n    /* Equation from page Astronomical Algorithms 102 */\n\n    const Lw = coordinates.longitude * -1;\n    const term1 = Math.sin(degreesToRadians(h0)) - Math.sin(degreesToRadians(coordinates.latitude)) * Math.sin(degreesToRadians(d2));\n    const term2 = Math.cos(degreesToRadians(coordinates.latitude)) * Math.cos(degreesToRadians(d2));\n    const H0 = radiansToDegrees(Math.acos(term1 / term2));\n    const m = afterTransit ? m0 + H0 / 360 : m0 - H0 / 360;\n    const Theta = unwindAngle(Theta0 + 360.985647 * m);\n    const a = unwindAngle(Astronomical.interpolateAngles(a2, a1, a3, m));\n    const delta = Astronomical.interpolate(d2, d1, d3, m);\n    const H = Theta - Lw - a;\n    const h = Astronomical.altitudeOfCelestialBody(coordinates.latitude, delta, H);\n    const term3 = h - h0;\n    const term4 = 360 * Math.cos(degreesToRadians(delta)) * Math.cos(degreesToRadians(coordinates.latitude)) * Math.sin(degreesToRadians(H));\n    const dm = term3 / term4;\n    return (m + dm) * 24;\n  },\n  /* Interpolation of a value given equidistant\n        previous and next values and a factor\n        equal to the fraction of the interpolated\n        point's time over the time between values. */\n  interpolate(y2, y1, y3, n) {\n    /* Equation from Astronomical Algorithms page 24 */\n    const a = y2 - y1;\n    const b = y3 - y2;\n    const c = b - a;\n    return y2 + n / 2 * (a + b + n * c);\n  },\n  /* Interpolation of three angles, accounting for\n        angle unwinding. */\n  interpolateAngles(y2, y1, y3, n) {\n    /* Equation from Astronomical Algorithms page 24 */\n    const a = unwindAngle(y2 - y1);\n    const b = unwindAngle(y3 - y2);\n    const c = b - a;\n    return y2 + n / 2 * (a + b + n * c);\n  },\n  /* The Julian Day for the given Gregorian date components. */\n  julianDay(year, month, day, hours = 0) {\n    /* Equation from Astronomical Algorithms page 60 */\n    const trunc = Math.trunc;\n    const Y = trunc(month > 2 ? year : year - 1);\n    const M = trunc(month > 2 ? month : month + 12);\n    const D = day + hours / 24;\n    const A = trunc(Y / 100);\n    const B = trunc(2 - A + trunc(A / 4));\n    const i0 = trunc(365.25 * (Y + 4716));\n    const i1 = trunc(30.6001 * (M + 1));\n    return i0 + i1 + D + B - 1524.5;\n  },\n  /* Julian century from the epoch. */\n  julianCentury(julianDay) {\n    /* Equation from Astronomical Algorithms page 163 */\n    return (julianDay - 2451545.0) / 36525;\n  },\n  /* Whether or not a year is a leap year (has 366 days). */\n  isLeapYear(year) {\n    if (year % 4 !== 0) {\n      return false;\n    }\n    if (year % 100 === 0 && year % 400 !== 0) {\n      return false;\n    }\n    return true;\n  },\n  seasonAdjustedMorningTwilight(latitude, dayOfYear, year, sunrise) {\n    const a = 75 + 28.65 / 55.0 * Math.abs(latitude);\n    const b = 75 + 19.44 / 55.0 * Math.abs(latitude);\n    const c = 75 + 32.74 / 55.0 * Math.abs(latitude);\n    const d = 75 + 48.1 / 55.0 * Math.abs(latitude);\n    const adjustment = function () {\n      const dyy = Astronomical.daysSinceSolstice(dayOfYear, year, latitude);\n      if (dyy < 91) {\n        return a + (b - a) / 91.0 * dyy;\n      } else if (dyy < 137) {\n        return b + (c - b) / 46.0 * (dyy - 91);\n      } else if (dyy < 183) {\n        return c + (d - c) / 46.0 * (dyy - 137);\n      } else if (dyy < 229) {\n        return d + (c - d) / 46.0 * (dyy - 183);\n      } else if (dyy < 275) {\n        return c + (b - c) / 46.0 * (dyy - 229);\n      } else {\n        return b + (a - b) / 91.0 * (dyy - 275);\n      }\n    }();\n    return dateByAddingSeconds(sunrise, Math.round(adjustment * -60.0));\n  },\n  seasonAdjustedEveningTwilight(latitude, dayOfYear, year, sunset, shafaq) {\n    let a, b, c, d;\n    if (shafaq === Shafaq.Ahmer) {\n      a = 62 + 17.4 / 55.0 * Math.abs(latitude);\n      b = 62 - 7.16 / 55.0 * Math.abs(latitude);\n      c = 62 + 5.12 / 55.0 * Math.abs(latitude);\n      d = 62 + 19.44 / 55.0 * Math.abs(latitude);\n    } else if (shafaq === Shafaq.Abyad) {\n      a = 75 + 25.6 / 55.0 * Math.abs(latitude);\n      b = 75 + 7.16 / 55.0 * Math.abs(latitude);\n      c = 75 + 36.84 / 55.0 * Math.abs(latitude);\n      d = 75 + 81.84 / 55.0 * Math.abs(latitude);\n    } else {\n      a = 75 + 25.6 / 55.0 * Math.abs(latitude);\n      b = 75 + 2.05 / 55.0 * Math.abs(latitude);\n      c = 75 - 9.21 / 55.0 * Math.abs(latitude);\n      d = 75 + 6.14 / 55.0 * Math.abs(latitude);\n    }\n    const adjustment = function () {\n      const dyy = Astronomical.daysSinceSolstice(dayOfYear, year, latitude);\n      if (dyy < 91) {\n        return a + (b - a) / 91.0 * dyy;\n      } else if (dyy < 137) {\n        return b + (c - b) / 46.0 * (dyy - 91);\n      } else if (dyy < 183) {\n        return c + (d - c) / 46.0 * (dyy - 137);\n      } else if (dyy < 229) {\n        return d + (c - d) / 46.0 * (dyy - 183);\n      } else if (dyy < 275) {\n        return c + (b - c) / 46.0 * (dyy - 229);\n      } else {\n        return b + (a - b) / 91.0 * (dyy - 275);\n      }\n    }();\n    return dateByAddingSeconds(sunset, Math.round(adjustment * 60.0));\n  },\n  daysSinceSolstice(dayOfYear, year, latitude) {\n    let daysSinceSolstice = 0;\n    const northernOffset = 10;\n    const southernOffset = Astronomical.isLeapYear(year) ? 173 : 172;\n    const daysInYear = Astronomical.isLeapYear(year) ? 366 : 365;\n    if (latitude >= 0) {\n      daysSinceSolstice = dayOfYear + northernOffset;\n      if (daysSinceSolstice >= daysInYear) {\n        daysSinceSolstice = daysSinceSolstice - daysInYear;\n      }\n    } else {\n      daysSinceSolstice = dayOfYear - southernOffset;\n      if (daysSinceSolstice < 0) {\n        daysSinceSolstice = daysSinceSolstice + daysInYear;\n      }\n    }\n    return daysSinceSolstice;\n  }\n};\nexport default Astronomical;","map":{"version":3,"names":["dateByAddingSeconds","degreesToRadians","normalizeToScale","quadrantShiftAngle","radiansToDegrees","unwindAngle","Shafaq","Astronomical","meanSolarLongitude","julianCentury","T","term1","term2","term3","Math","pow","L0","meanLunarLongitude","Lp","ascendingLunarNodeLongitude","term4","Omega","meanSolarAnomaly","M","solarEquationOfTheCenter","meanAnomaly","Mrad","sin","apparentSolarLongitude","meanLongitude","longitude","Lambda","meanObliquityOfTheEcliptic","apparentObliquityOfTheEcliptic","Epsilon0","O","cos","meanSiderealTime","JD","Theta","nutationInLongitude","solarLongitude","lunarLongitude","ascendingNode","nutationInObliquity","altitudeOfCelestialBody","observerLatitude","declination","localHourAngle","Phi","delta","H","asin","approximateTransit","siderealTime","rightAscension","L","Theta0","a2","Lw","correctedTransit","previousRightAscension","nextRightAscension","m0","a1","a3","a","interpolateAngles","dm","correctedHourAngle","angle","coordinates","afterTransit","previousDeclination","nextDeclination","h0","d2","d1","d3","latitude","H0","acos","m","interpolate","h","y2","y1","y3","n","b","c","julianDay","year","month","day","hours","trunc","Y","D","A","B","i0","i1","isLeapYear","seasonAdjustedMorningTwilight","dayOfYear","sunrise","abs","d","adjustment","dyy","daysSinceSolstice","round","seasonAdjustedEveningTwilight","sunset","shafaq","Ahmer","Abyad","northernOffset","southernOffset","daysInYear"],"sources":["C:\\Users\\Rashid\\muslim-daily\\frontend\\node_modules\\adhan\\src\\Astronomical.ts"],"sourcesContent":["/* eslint-disable max-params, max-lines */\nimport Coordinates from './Coordinates';\nimport { dateByAddingSeconds } from './DateUtils';\nimport {\n  degreesToRadians,\n  normalizeToScale,\n  quadrantShiftAngle,\n  radiansToDegrees,\n  unwindAngle,\n} from './MathUtils';\nimport { Shafaq } from './Shafaq';\nimport { ValueOf } from './TypeUtils';\n\nconst Astronomical = {\n  /* The geometric mean longitude of the sun in degrees. */\n  meanSolarLongitude(julianCentury: number) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 163 */\n    const term1 = 280.4664567;\n    const term2 = 36000.76983 * T;\n    const term3 = 0.0003032 * Math.pow(T, 2);\n    const L0 = term1 + term2 + term3;\n    return unwindAngle(L0);\n  },\n\n  /* The geometric mean longitude of the moon in degrees. */\n  meanLunarLongitude(julianCentury: number) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 144 */\n    const term1 = 218.3165;\n    const term2 = 481267.8813 * T;\n    const Lp = term1 + term2;\n    return unwindAngle(Lp);\n  },\n\n  ascendingLunarNodeLongitude(julianCentury: number) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 144 */\n    const term1 = 125.04452;\n    const term2 = 1934.136261 * T;\n    const term3 = 0.0020708 * Math.pow(T, 2);\n    const term4 = Math.pow(T, 3) / 450000;\n    const Omega = term1 - term2 + term3 + term4;\n    return unwindAngle(Omega);\n  },\n\n  /* The mean anomaly of the sun. */\n  meanSolarAnomaly(julianCentury: number) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 163 */\n    const term1 = 357.52911;\n    const term2 = 35999.05029 * T;\n    const term3 = 0.0001537 * Math.pow(T, 2);\n    const M = term1 + term2 - term3;\n    return unwindAngle(M);\n  },\n\n  /* The Sun's equation of the center in degrees. */\n  solarEquationOfTheCenter(julianCentury: number, meanAnomaly: number) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 164 */\n    const Mrad = degreesToRadians(meanAnomaly);\n    const term1 =\n      (1.914602 - 0.004817 * T - 0.000014 * Math.pow(T, 2)) * Math.sin(Mrad);\n    const term2 = (0.019993 - 0.000101 * T) * Math.sin(2 * Mrad);\n    const term3 = 0.000289 * Math.sin(3 * Mrad);\n    return term1 + term2 + term3;\n  },\n\n  /* The apparent longitude of the Sun, referred to the\n        true equinox of the date. */\n  apparentSolarLongitude(julianCentury: number, meanLongitude: number) {\n    const T = julianCentury;\n    const L0 = meanLongitude;\n    /* Equation from Astronomical Algorithms page 164 */\n    const longitude =\n      L0 +\n      Astronomical.solarEquationOfTheCenter(\n        T,\n        Astronomical.meanSolarAnomaly(T),\n      );\n    const Omega = 125.04 - 1934.136 * T;\n    const Lambda =\n      longitude - 0.00569 - 0.00478 * Math.sin(degreesToRadians(Omega));\n    return unwindAngle(Lambda);\n  },\n\n  /* The mean obliquity of the ecliptic, formula\n        adopted by the International Astronomical Union.\n        Represented in degrees. */\n  meanObliquityOfTheEcliptic(julianCentury: number) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 147 */\n    const term1 = 23.439291;\n    const term2 = 0.013004167 * T;\n    const term3 = 0.0000001639 * Math.pow(T, 2);\n    const term4 = 0.0000005036 * Math.pow(T, 3);\n    return term1 - term2 - term3 + term4;\n  },\n\n  /* The mean obliquity of the ecliptic, corrected for\n        calculating the apparent position of the sun, in degrees. */\n  apparentObliquityOfTheEcliptic(\n    julianCentury: number,\n    meanObliquityOfTheEcliptic: number,\n  ) {\n    const T = julianCentury;\n    const Epsilon0 = meanObliquityOfTheEcliptic;\n    /* Equation from Astronomical Algorithms page 165 */\n    const O = 125.04 - 1934.136 * T;\n    return Epsilon0 + 0.00256 * Math.cos(degreesToRadians(O));\n  },\n\n  /* Mean sidereal time, the hour angle of the vernal equinox, in degrees. */\n  meanSiderealTime(julianCentury: number) {\n    const T = julianCentury;\n    /* Equation from Astronomical Algorithms page 165 */\n    const JD = T * 36525 + 2451545.0;\n    const term1 = 280.46061837;\n    const term2 = 360.98564736629 * (JD - 2451545);\n    const term3 = 0.000387933 * Math.pow(T, 2);\n    const term4 = Math.pow(T, 3) / 38710000;\n    const Theta = term1 + term2 + term3 - term4;\n    return unwindAngle(Theta);\n  },\n\n  nutationInLongitude(\n    julianCentury: number,\n    solarLongitude: number,\n    lunarLongitude: number,\n    ascendingNode: number,\n  ) {\n    const L0 = solarLongitude;\n    const Lp = lunarLongitude;\n    const Omega = ascendingNode;\n    /* Equation from Astronomical Algorithms page 144 */\n    const term1 = (-17.2 / 3600) * Math.sin(degreesToRadians(Omega));\n    const term2 = (1.32 / 3600) * Math.sin(2 * degreesToRadians(L0));\n    const term3 = (0.23 / 3600) * Math.sin(2 * degreesToRadians(Lp));\n    const term4 = (0.21 / 3600) * Math.sin(2 * degreesToRadians(Omega));\n    return term1 - term2 - term3 + term4;\n  },\n\n  nutationInObliquity(\n    julianCentury: number,\n    solarLongitude: number,\n    lunarLongitude: number,\n    ascendingNode: number,\n  ) {\n    const L0 = solarLongitude;\n    const Lp = lunarLongitude;\n    const Omega = ascendingNode;\n    /* Equation from Astronomical Algorithms page 144 */\n    const term1 = (9.2 / 3600) * Math.cos(degreesToRadians(Omega));\n    const term2 = (0.57 / 3600) * Math.cos(2 * degreesToRadians(L0));\n    const term3 = (0.1 / 3600) * Math.cos(2 * degreesToRadians(Lp));\n    const term4 = (0.09 / 3600) * Math.cos(2 * degreesToRadians(Omega));\n    return term1 + term2 + term3 - term4;\n  },\n\n  altitudeOfCelestialBody(\n    observerLatitude: number,\n    declination: number,\n    localHourAngle: number,\n  ) {\n    const Phi = observerLatitude;\n    const delta = declination;\n    const H = localHourAngle;\n    /* Equation from Astronomical Algorithms page 93 */\n    const term1 =\n      Math.sin(degreesToRadians(Phi)) * Math.sin(degreesToRadians(delta));\n    const term2 =\n      Math.cos(degreesToRadians(Phi)) *\n      Math.cos(degreesToRadians(delta)) *\n      Math.cos(degreesToRadians(H));\n    return radiansToDegrees(Math.asin(term1 + term2));\n  },\n\n  approximateTransit(\n    longitude: number,\n    siderealTime: number,\n    rightAscension: number,\n  ) {\n    const L = longitude;\n    const Theta0 = siderealTime;\n    const a2 = rightAscension;\n    /* Equation from page Astronomical Algorithms 102 */\n    const Lw = L * -1;\n    return normalizeToScale((a2 + Lw - Theta0) / 360, 1);\n  },\n\n  /* The time at which the sun is at its highest point in the sky (in universal time) */\n  correctedTransit(\n    approximateTransit: number,\n    longitude: number,\n    siderealTime: number,\n    rightAscension: number,\n    previousRightAscension: number,\n    nextRightAscension: number,\n  ) {\n    const m0 = approximateTransit;\n    const L = longitude;\n    const Theta0 = siderealTime;\n    const a2 = rightAscension;\n    const a1 = previousRightAscension;\n    const a3 = nextRightAscension;\n    /* Equation from page Astronomical Algorithms 102 */\n    const Lw = L * -1;\n    const Theta = unwindAngle(Theta0 + 360.985647 * m0);\n    const a = unwindAngle(Astronomical.interpolateAngles(a2, a1, a3, m0));\n    const H = quadrantShiftAngle(Theta - Lw - a);\n    const dm = H / -360;\n    return (m0 + dm) * 24;\n  },\n\n  correctedHourAngle(\n    approximateTransit: number,\n    angle: number,\n    coordinates: Coordinates,\n    afterTransit: boolean,\n    siderealTime: number,\n    rightAscension: number,\n    previousRightAscension: number,\n    nextRightAscension: number,\n    declination: number,\n    previousDeclination: number,\n    nextDeclination: number,\n  ) {\n    const m0 = approximateTransit;\n    const h0 = angle;\n    const Theta0 = siderealTime;\n    const a2 = rightAscension;\n    const a1 = previousRightAscension;\n    const a3 = nextRightAscension;\n    const d2 = declination;\n    const d1 = previousDeclination;\n    const d3 = nextDeclination;\n\n    /* Equation from page Astronomical Algorithms 102 */\n    const Lw = coordinates.longitude * -1;\n    const term1 =\n      Math.sin(degreesToRadians(h0)) -\n      Math.sin(degreesToRadians(coordinates.latitude)) *\n        Math.sin(degreesToRadians(d2));\n    const term2 =\n      Math.cos(degreesToRadians(coordinates.latitude)) *\n      Math.cos(degreesToRadians(d2));\n    const H0 = radiansToDegrees(Math.acos(term1 / term2));\n    const m = afterTransit ? m0 + H0 / 360 : m0 - H0 / 360;\n    const Theta = unwindAngle(Theta0 + 360.985647 * m);\n    const a = unwindAngle(Astronomical.interpolateAngles(a2, a1, a3, m));\n    const delta = Astronomical.interpolate(d2, d1, d3, m);\n    const H = Theta - Lw - a;\n    const h = Astronomical.altitudeOfCelestialBody(\n      coordinates.latitude,\n      delta,\n      H,\n    );\n    const term3 = h - h0;\n    const term4 =\n      360 *\n      Math.cos(degreesToRadians(delta)) *\n      Math.cos(degreesToRadians(coordinates.latitude)) *\n      Math.sin(degreesToRadians(H));\n    const dm = term3 / term4;\n    return (m + dm) * 24;\n  },\n\n  /* Interpolation of a value given equidistant\n        previous and next values and a factor\n        equal to the fraction of the interpolated\n        point's time over the time between values. */\n  interpolate(y2: number, y1: number, y3: number, n: number) {\n    /* Equation from Astronomical Algorithms page 24 */\n    const a = y2 - y1;\n    const b = y3 - y2;\n    const c = b - a;\n    return y2 + (n / 2) * (a + b + n * c);\n  },\n\n  /* Interpolation of three angles, accounting for\n        angle unwinding. */\n  interpolateAngles(y2: number, y1: number, y3: number, n: number) {\n    /* Equation from Astronomical Algorithms page 24 */\n    const a = unwindAngle(y2 - y1);\n    const b = unwindAngle(y3 - y2);\n    const c = b - a;\n    return y2 + (n / 2) * (a + b + n * c);\n  },\n\n  /* The Julian Day for the given Gregorian date components. */\n  julianDay(year: number, month: number, day: number, hours = 0) {\n    /* Equation from Astronomical Algorithms page 60 */\n\n    const trunc = Math.trunc;\n\n    const Y = trunc(month > 2 ? year : year - 1);\n    const M = trunc(month > 2 ? month : month + 12);\n    const D = day + hours / 24;\n\n    const A = trunc(Y / 100);\n    const B = trunc(2 - A + trunc(A / 4));\n\n    const i0 = trunc(365.25 * (Y + 4716));\n    const i1 = trunc(30.6001 * (M + 1));\n\n    return i0 + i1 + D + B - 1524.5;\n  },\n\n  /* Julian century from the epoch. */\n  julianCentury(julianDay: number) {\n    /* Equation from Astronomical Algorithms page 163 */\n    return (julianDay - 2451545.0) / 36525;\n  },\n\n  /* Whether or not a year is a leap year (has 366 days). */\n  isLeapYear(year: number) {\n    if (year % 4 !== 0) {\n      return false;\n    }\n\n    if (year % 100 === 0 && year % 400 !== 0) {\n      return false;\n    }\n\n    return true;\n  },\n\n  seasonAdjustedMorningTwilight(\n    latitude: number,\n    dayOfYear: number,\n    year: number,\n    sunrise: Date,\n  ) {\n    const a = 75 + (28.65 / 55.0) * Math.abs(latitude);\n    const b = 75 + (19.44 / 55.0) * Math.abs(latitude);\n    const c = 75 + (32.74 / 55.0) * Math.abs(latitude);\n    const d = 75 + (48.1 / 55.0) * Math.abs(latitude);\n\n    const adjustment = (function () {\n      const dyy = Astronomical.daysSinceSolstice(dayOfYear, year, latitude);\n      if (dyy < 91) {\n        return a + ((b - a) / 91.0) * dyy;\n      } else if (dyy < 137) {\n        return b + ((c - b) / 46.0) * (dyy - 91);\n      } else if (dyy < 183) {\n        return c + ((d - c) / 46.0) * (dyy - 137);\n      } else if (dyy < 229) {\n        return d + ((c - d) / 46.0) * (dyy - 183);\n      } else if (dyy < 275) {\n        return c + ((b - c) / 46.0) * (dyy - 229);\n      } else {\n        return b + ((a - b) / 91.0) * (dyy - 275);\n      }\n    })();\n\n    return dateByAddingSeconds(sunrise, Math.round(adjustment * -60.0));\n  },\n\n  seasonAdjustedEveningTwilight(\n    latitude: number,\n    dayOfYear: number,\n    year: number,\n    sunset: Date,\n    shafaq: ValueOf<typeof Shafaq>,\n  ) {\n    let a, b, c, d;\n    if (shafaq === Shafaq.Ahmer) {\n      a = 62 + (17.4 / 55.0) * Math.abs(latitude);\n      b = 62 - (7.16 / 55.0) * Math.abs(latitude);\n      c = 62 + (5.12 / 55.0) * Math.abs(latitude);\n      d = 62 + (19.44 / 55.0) * Math.abs(latitude);\n    } else if (shafaq === Shafaq.Abyad) {\n      a = 75 + (25.6 / 55.0) * Math.abs(latitude);\n      b = 75 + (7.16 / 55.0) * Math.abs(latitude);\n      c = 75 + (36.84 / 55.0) * Math.abs(latitude);\n      d = 75 + (81.84 / 55.0) * Math.abs(latitude);\n    } else {\n      a = 75 + (25.6 / 55.0) * Math.abs(latitude);\n      b = 75 + (2.05 / 55.0) * Math.abs(latitude);\n      c = 75 - (9.21 / 55.0) * Math.abs(latitude);\n      d = 75 + (6.14 / 55.0) * Math.abs(latitude);\n    }\n\n    const adjustment = (function () {\n      const dyy = Astronomical.daysSinceSolstice(dayOfYear, year, latitude);\n      if (dyy < 91) {\n        return a + ((b - a) / 91.0) * dyy;\n      } else if (dyy < 137) {\n        return b + ((c - b) / 46.0) * (dyy - 91);\n      } else if (dyy < 183) {\n        return c + ((d - c) / 46.0) * (dyy - 137);\n      } else if (dyy < 229) {\n        return d + ((c - d) / 46.0) * (dyy - 183);\n      } else if (dyy < 275) {\n        return c + ((b - c) / 46.0) * (dyy - 229);\n      } else {\n        return b + ((a - b) / 91.0) * (dyy - 275);\n      }\n    })();\n\n    return dateByAddingSeconds(sunset, Math.round(adjustment * 60.0));\n  },\n\n  daysSinceSolstice(dayOfYear: number, year: number, latitude: number) {\n    let daysSinceSolstice = 0;\n    const northernOffset = 10;\n    const southernOffset = Astronomical.isLeapYear(year) ? 173 : 172;\n    const daysInYear = Astronomical.isLeapYear(year) ? 366 : 365;\n\n    if (latitude >= 0) {\n      daysSinceSolstice = dayOfYear + northernOffset;\n      if (daysSinceSolstice >= daysInYear) {\n        daysSinceSolstice = daysSinceSolstice - daysInYear;\n      }\n    } else {\n      daysSinceSolstice = dayOfYear - southernOffset;\n      if (daysSinceSolstice < 0) {\n        daysSinceSolstice = daysSinceSolstice + daysInYear;\n      }\n    }\n\n    return daysSinceSolstice;\n  },\n};\n\nexport default Astronomical;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}