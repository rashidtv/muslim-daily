{"ast":null,"code":"import { CalculationMethod, PrayerTimes, Coordinates, Madhab, HighLatitudeRule } from 'adhan';\n\n// Malaysia calculation parameters\nconst getCalculationParams = () => {\n  const params = CalculationMethod.MuslimWorldLeague();\n  params.madhab = Madhab.Shafi;\n  // Remove high latitude rule for Malaysia (not needed near equator)\n  // params.highLatitudeRule = HighLatitudeRule.MiddleOfTheNight;\n  params.fajrAngle = 20;\n  params.ishaAngle = 18;\n  return params;\n};\n\n// Format time to 12-hour format\nconst formatTime = date => {\n  return date.toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true\n  });\n};\n\n// Calculate prayer times for given coordinates and date\nexport const calculatePrayerTimes = (latitude, longitude, date = new Date()) => {\n  try {\n    const coordinates = new Coordinates(latitude, longitude);\n    const params = getCalculationParams();\n    const prayerTimes = new PrayerTimes(coordinates, date, params);\n    return {\n      fajr: formatTime(prayerTimes.fajr),\n      sunrise: formatTime(prayerTimes.sunrise),\n      dhuhr: formatTime(prayerTimes.dhuhr),\n      asr: formatTime(prayerTimes.asr),\n      maghrib: formatTime(prayerTimes.maghrib),\n      isha: formatTime(prayerTimes.isha),\n      method: 'Muslim World League (Mazhab Shafi)',\n      location: {\n        latitude,\n        longitude\n      },\n      date: date.toDateString(),\n      calculated: true,\n      success: true\n    };\n  } catch (error) {\n    console.error('Prayer time calculation error:', error);\n    // Try with simpler parameters\n    return calculateWithSimpleParams(latitude, longitude, date);\n  }\n};\n\n// Alternative calculation with simpler parameters\nconst calculateWithSimpleParams = (latitude, longitude, date = new Date()) => {\n  try {\n    const coordinates = new Coordinates(latitude, longitude);\n    const params = CalculationMethod.MuslimWorldLeague();\n    params.madhab = Madhab.Shafi;\n    // Use simpler calculation without high latitude rules\n    params.fajrAngle = 20;\n    params.ishaAngle = 18;\n    const prayerTimes = new PrayerTimes(coordinates, date, params);\n    return {\n      fajr: formatTime(prayerTimes.fajr),\n      sunrise: formatTime(prayerTimes.sunrise),\n      dhuhr: formatTime(prayerTimes.dhuhr),\n      asr: formatTime(prayerTimes.asr),\n      maghrib: formatTime(prayerTimes.maghrib),\n      isha: formatTime(prayerTimes.isha),\n      method: 'Muslim World League (Simple)',\n      location: {\n        latitude,\n        longitude\n      },\n      date: date.toDateString(),\n      calculated: true,\n      success: true\n    };\n  } catch (error) {\n    console.error('Simple calculation also failed:', error);\n    return getFallbackTimes();\n  }\n};\n\n// Fallback times for Kuala Lumpur\nconst getFallbackTimes = () => {\n  const now = new Date();\n  return {\n    fajr: '5:45 AM',\n    sunrise: '7:10 AM',\n    dhuhr: '1:15 PM',\n    asr: '4:30 PM',\n    maghrib: '7:05 PM',\n    isha: '8:20 PM',\n    method: 'Fallback (Kuala Lumpur)',\n    location: {\n      latitude: 3.1390,\n      longitude: 101.6869\n    },\n    date: now.toDateString(),\n    calculated: false,\n    success: true,\n    note: 'Using default Kuala Lumpur times'\n  };\n};\n\n// Group cities by region for better organization\nexport const citiesByRegion = {\n  'West Malaysia': ['Kuala Lumpur', 'Putrajaya', 'Johor Bahru', 'Penang', 'Ipoh', 'Klang', 'Kota Bharu', 'Kuala Terengganu', 'Kuantan', 'Malacca', 'Seremban', 'Shah Alam', 'Petaling Jaya', 'Alor Setar', 'Butterworth', 'Taiping'],\n  'Sabah': ['Kota Kinabalu', 'Sandakan', 'Tawau', 'Lahad Datu', 'Keningau', 'Semporna', 'Kudat', 'Ranau', 'Beaufort'],\n  'Sarawak': ['Kuching', 'Miri', 'Sibu', 'Bintulu', 'Limbang', 'Sarikei', 'Sri Aman', 'Kapit', 'Mukah'],\n  'Federal Territories': ['Labuan']\n};\n\n// Get user's current location\nexport const getCurrentLocation = () => {\n  return new Promise((resolve, reject) => {\n    if (!navigator.geolocation) {\n      reject(new Error('Geolocation not supported'));\n      return;\n    }\n    navigator.geolocation.getCurrentPosition(position => {\n      resolve({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude,\n        accuracy: position.coords.accuracy\n      });\n    }, error => {\n      reject(error);\n    }, {\n      enableHighAccuracy: false,\n      timeout: 10000,\n      maximumAge: 600000 // 10 minutes\n    });\n  });\n};\n\n// Get next prayer\nexport const getNextPrayer = prayerTimes => {\n  const now = new Date();\n  const prayers = [{\n    name: 'Fajr',\n    time: prayerTimes.fajr\n  }, {\n    name: 'Dhuhr',\n    time: prayerTimes.dhuhr\n  }, {\n    name: 'Asr',\n    time: prayerTimes.asr\n  }, {\n    name: 'Maghrib',\n    time: prayerTimes.maghrib\n  }, {\n    name: 'Isha',\n    time: prayerTimes.isha\n  }];\n  for (let prayer of prayers) {\n    const prayerTime = parseTimeString(prayer.time);\n    if (prayerTime > now) {\n      return {\n        name: prayer.name,\n        time: prayer.time,\n        timeObject: prayerTime\n      };\n    }\n  }\n\n  // If all prayers passed, return first prayer of next day\n  const tomorrow = new Date(now);\n  tomorrow.setDate(tomorrow.getDate() + 1);\n  const fajrTime = parseTimeString(prayerTimes.fajr);\n  tomorrow.setHours(fajrTime.getHours(), fajrTime.getMinutes(), 0, 0);\n  return {\n    name: 'Fajr',\n    time: prayerTimes.fajr,\n    timeObject: tomorrow,\n    isTomorrow: true\n  };\n};\n\n// Helper function to parse time strings\nconst parseTimeString = timeStr => {\n  const [time, modifier] = timeStr.split(' ');\n  let [hours, minutes] = time.split(':');\n  hours = parseInt(hours);\n  minutes = parseInt(minutes);\n  if (modifier === 'PM' && hours < 12) hours += 12;\n  if (modifier === 'AM' && hours === 12) hours = 0;\n  const date = new Date();\n  date.setHours(hours, minutes, 0, 0);\n  return date;\n};\n\n// Simple function to get current prayer\nexport const getCurrentPrayer = prayerTimes => {\n  const now = new Date();\n  const prayers = [{\n    name: 'Fajr',\n    time: prayerTimes.fajr,\n    end: prayerTimes.sunrise\n  }, {\n    name: 'Dhuhr',\n    time: prayerTimes.dhuhr,\n    end: prayerTimes.asr\n  }, {\n    name: 'Asr',\n    time: prayerTimes.asr,\n    end: prayerTimes.maghrib\n  }, {\n    name: 'Maghrib',\n    time: prayerTimes.maghrib,\n    end: prayerTimes.isha\n  }, {\n    name: 'Isha',\n    time: prayerTimes.isha\n  }];\n  for (let i = 0; i < prayers.length; i++) {\n    const prayer = prayers[i];\n    const prayerTime = parseTimeString(prayer.time);\n    if (prayer.end) {\n      const endTime = parseTimeString(prayer.end);\n      if (now >= prayerTime && now < endTime) {\n        return prayer.name;\n      }\n    } else {\n      // For Isha, check if it's after Maghrib and before midnight\n      const maghribTime = parseTimeString(prayerTimes.maghrib);\n      if (now >= maghribTime) {\n        return prayer.name;\n      }\n    }\n  }\n  return null;\n};","map":{"version":3,"names":["CalculationMethod","PrayerTimes","Coordinates","Madhab","HighLatitudeRule","getCalculationParams","params","MuslimWorldLeague","madhab","Shafi","fajrAngle","ishaAngle","formatTime","date","toLocaleTimeString","hour","minute","hour12","calculatePrayerTimes","latitude","longitude","Date","coordinates","prayerTimes","fajr","sunrise","dhuhr","asr","maghrib","isha","method","location","toDateString","calculated","success","error","console","calculateWithSimpleParams","getFallbackTimes","now","note","citiesByRegion","getCurrentLocation","Promise","resolve","reject","navigator","geolocation","Error","getCurrentPosition","position","coords","accuracy","enableHighAccuracy","timeout","maximumAge","getNextPrayer","prayers","name","time","prayer","prayerTime","parseTimeString","timeObject","tomorrow","setDate","getDate","fajrTime","setHours","getHours","getMinutes","isTomorrow","timeStr","modifier","split","hours","minutes","parseInt","getCurrentPrayer","end","i","length","endTime","maghribTime"],"sources":["C:/Users/Rashid/muslim-daily/frontend/src/utils/prayerTimes.js"],"sourcesContent":["import { CalculationMethod, PrayerTimes, Coordinates, Madhab, HighLatitudeRule } from 'adhan';\r\n\r\n// Malaysia calculation parameters\r\nconst getCalculationParams = () => {\r\n  const params = CalculationMethod.MuslimWorldLeague();\r\n  params.madhab = Madhab.Shafi;\r\n  // Remove high latitude rule for Malaysia (not needed near equator)\r\n  // params.highLatitudeRule = HighLatitudeRule.MiddleOfTheNight;\r\n  params.fajrAngle = 20;\r\n  params.ishaAngle = 18;\r\n  return params;\r\n};\r\n\r\n// Format time to 12-hour format\r\nconst formatTime = (date) => {\r\n  return date.toLocaleTimeString('en-US', {\r\n    hour: 'numeric',\r\n    minute: '2-digit',\r\n    hour12: true\r\n  });\r\n};\r\n\r\n// Calculate prayer times for given coordinates and date\r\nexport const calculatePrayerTimes = (latitude, longitude, date = new Date()) => {\r\n  try {\r\n    const coordinates = new Coordinates(latitude, longitude);\r\n    const params = getCalculationParams();\r\n    \r\n    const prayerTimes = new PrayerTimes(coordinates, date, params);\r\n    \r\n    return {\r\n      fajr: formatTime(prayerTimes.fajr),\r\n      sunrise: formatTime(prayerTimes.sunrise),\r\n      dhuhr: formatTime(prayerTimes.dhuhr),\r\n      asr: formatTime(prayerTimes.asr),\r\n      maghrib: formatTime(prayerTimes.maghrib),\r\n      isha: formatTime(prayerTimes.isha),\r\n      method: 'Muslim World League (Mazhab Shafi)',\r\n      location: { latitude, longitude },\r\n      date: date.toDateString(),\r\n      calculated: true,\r\n      success: true\r\n    };\r\n  } catch (error) {\r\n    console.error('Prayer time calculation error:', error);\r\n    // Try with simpler parameters\r\n    return calculateWithSimpleParams(latitude, longitude, date);\r\n  }\r\n};\r\n\r\n// Alternative calculation with simpler parameters\r\nconst calculateWithSimpleParams = (latitude, longitude, date = new Date()) => {\r\n  try {\r\n    const coordinates = new Coordinates(latitude, longitude);\r\n    const params = CalculationMethod.MuslimWorldLeague();\r\n    params.madhab = Madhab.Shafi;\r\n    // Use simpler calculation without high latitude rules\r\n    params.fajrAngle = 20;\r\n    params.ishaAngle = 18;\r\n    \r\n    const prayerTimes = new PrayerTimes(coordinates, date, params);\r\n    \r\n    return {\r\n      fajr: formatTime(prayerTimes.fajr),\r\n      sunrise: formatTime(prayerTimes.sunrise),\r\n      dhuhr: formatTime(prayerTimes.dhuhr),\r\n      asr: formatTime(prayerTimes.asr),\r\n      maghrib: formatTime(prayerTimes.maghrib),\r\n      isha: formatTime(prayerTimes.isha),\r\n      method: 'Muslim World League (Simple)',\r\n      location: { latitude, longitude },\r\n      date: date.toDateString(),\r\n      calculated: true,\r\n      success: true\r\n    };\r\n  } catch (error) {\r\n    console.error('Simple calculation also failed:', error);\r\n    return getFallbackTimes();\r\n  }\r\n};\r\n\r\n// Fallback times for Kuala Lumpur\r\nconst getFallbackTimes = () => {\r\n  const now = new Date();\r\n  return {\r\n    fajr: '5:45 AM',\r\n    sunrise: '7:10 AM',\r\n    dhuhr: '1:15 PM',\r\n    asr: '4:30 PM',\r\n    maghrib: '7:05 PM',\r\n    isha: '8:20 PM',\r\n    method: 'Fallback (Kuala Lumpur)',\r\n    location: { latitude: 3.1390, longitude: 101.6869 },\r\n    date: now.toDateString(),\r\n    calculated: false,\r\n    success: true,\r\n    note: 'Using default Kuala Lumpur times'\r\n  };\r\n};\r\n\r\n// Group cities by region for better organization\r\nexport const citiesByRegion = {\r\n  'West Malaysia': [\r\n    'Kuala Lumpur', 'Putrajaya', 'Johor Bahru', 'Penang', 'Ipoh', \r\n    'Klang', 'Kota Bharu', 'Kuala Terengganu', 'Kuantan', 'Malacca',\r\n    'Seremban', 'Shah Alam', 'Petaling Jaya', 'Alor Setar', 'Butterworth', 'Taiping'\r\n  ],\r\n  'Sabah': [\r\n    'Kota Kinabalu', 'Sandakan', 'Tawau', 'Lahad Datu', 'Keningau',\r\n    'Semporna', 'Kudat', 'Ranau', 'Beaufort'\r\n  ],\r\n  'Sarawak': [\r\n    'Kuching', 'Miri', 'Sibu', 'Bintulu', 'Limbang',\r\n    'Sarikei', 'Sri Aman', 'Kapit', 'Mukah'\r\n  ],\r\n  'Federal Territories': [\r\n    'Labuan'\r\n  ]\r\n};\r\n\r\n// Get user's current location\r\nexport const getCurrentLocation = () => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!navigator.geolocation) {\r\n      reject(new Error('Geolocation not supported'));\r\n      return;\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        resolve({\r\n          latitude: position.coords.latitude,\r\n          longitude: position.coords.longitude,\r\n          accuracy: position.coords.accuracy\r\n        });\r\n      },\r\n      (error) => {\r\n        reject(error);\r\n      },\r\n      {\r\n        enableHighAccuracy: false,\r\n        timeout: 10000,\r\n        maximumAge: 600000 // 10 minutes\r\n      }\r\n    );\r\n  });\r\n};\r\n\r\n// Get next prayer\r\nexport const getNextPrayer = (prayerTimes) => {\r\n  const now = new Date();\r\n  const prayers = [\r\n    { name: 'Fajr', time: prayerTimes.fajr },\r\n    { name: 'Dhuhr', time: prayerTimes.dhuhr },\r\n    { name: 'Asr', time: prayerTimes.asr },\r\n    { name: 'Maghrib', time: prayerTimes.maghrib },\r\n    { name: 'Isha', time: prayerTimes.isha }\r\n  ];\r\n\r\n  for (let prayer of prayers) {\r\n    const prayerTime = parseTimeString(prayer.time);\r\n    \r\n    if (prayerTime > now) {\r\n      return {\r\n        name: prayer.name,\r\n        time: prayer.time,\r\n        timeObject: prayerTime\r\n      };\r\n    }\r\n  }\r\n\r\n  // If all prayers passed, return first prayer of next day\r\n  const tomorrow = new Date(now);\r\n  tomorrow.setDate(tomorrow.getDate() + 1);\r\n  const fajrTime = parseTimeString(prayerTimes.fajr);\r\n  tomorrow.setHours(fajrTime.getHours(), fajrTime.getMinutes(), 0, 0);\r\n  \r\n  return {\r\n    name: 'Fajr',\r\n    time: prayerTimes.fajr,\r\n    timeObject: tomorrow,\r\n    isTomorrow: true\r\n  };\r\n};\r\n\r\n// Helper function to parse time strings\r\nconst parseTimeString = (timeStr) => {\r\n  const [time, modifier] = timeStr.split(' ');\r\n  let [hours, minutes] = time.split(':');\r\n  \r\n  hours = parseInt(hours);\r\n  minutes = parseInt(minutes);\r\n  \r\n  if (modifier === 'PM' && hours < 12) hours += 12;\r\n  if (modifier === 'AM' && hours === 12) hours = 0;\r\n  \r\n  const date = new Date();\r\n  date.setHours(hours, minutes, 0, 0);\r\n  return date;\r\n};\r\n\r\n// Simple function to get current prayer\r\nexport const getCurrentPrayer = (prayerTimes) => {\r\n  const now = new Date();\r\n  const prayers = [\r\n    { name: 'Fajr', time: prayerTimes.fajr, end: prayerTimes.sunrise },\r\n    { name: 'Dhuhr', time: prayerTimes.dhuhr, end: prayerTimes.asr },\r\n    { name: 'Asr', time: prayerTimes.asr, end: prayerTimes.maghrib },\r\n    { name: 'Maghrib', time: prayerTimes.maghrib, end: prayerTimes.isha },\r\n    { name: 'Isha', time: prayerTimes.isha }\r\n  ];\r\n\r\n  for (let i = 0; i < prayers.length; i++) {\r\n    const prayer = prayers[i];\r\n    const prayerTime = parseTimeString(prayer.time);\r\n    \r\n    if (prayer.end) {\r\n      const endTime = parseTimeString(prayer.end);\r\n      if (now >= prayerTime && now < endTime) {\r\n        return prayer.name;\r\n      }\r\n    } else {\r\n      // For Isha, check if it's after Maghrib and before midnight\r\n      const maghribTime = parseTimeString(prayerTimes.maghrib);\r\n      if (now >= maghribTime) {\r\n        return prayer.name;\r\n      }\r\n    }\r\n  }\r\n\r\n  return null;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}