{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rashid\\\\muslim-daily\\\\frontend\\\\src\\\\context\\\\PracticeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PracticeContext = /*#__PURE__*/createContext();\nexport const usePractice = () => {\n  _s();\n  const context = useContext(PracticeContext);\n  if (!context) {\n    throw new Error('usePractice must be used within a PracticeProvider');\n  }\n  return context;\n};\n_s(usePractice, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const PracticeProvider = ({\n  children\n}) => {\n  _s2();\n  const [practices, setPractices] = useState({});\n  const [streak, setStreak] = useState(0);\n  const [todayStats, setTodayStats] = useState({\n    prayersCompleted: 0,\n    totalPrayers: 5,\n    progress: 0\n  });\n\n  // Load practices from localStorage on app start\n  useEffect(() => {\n    const savedPractices = localStorage.getItem('muslimDaily_practices');\n    const savedStreak = localStorage.getItem('muslimDaily_streak');\n    if (savedPractices) {\n      setPractices(JSON.parse(savedPractices));\n    }\n    if (savedStreak) {\n      setStreak(parseInt(savedStreak));\n    }\n    updateTodayStats();\n  }, []);\n\n  // Update today's stats whenever practices change\n  useEffect(() => {\n    updateTodayStats();\n    saveToLocalStorage();\n  }, [practices]);\n  const updateTodayStats = () => {\n    const today = new Date().toDateString();\n    const todayPractices = practices[today] || {};\n    const prayerKeys = ['fajr', 'dhuhr', 'asr', 'maghrib', 'isha'];\n    const prayersCompleted = prayerKeys.filter(key => todayPractices[key]).length;\n    const progress = prayersCompleted / 5 * 100;\n    setTodayStats({\n      prayersCompleted,\n      totalPrayers: 5,\n      progress\n    });\n\n    // Update streak\n    updateStreak(todayPractices, today);\n  };\n  const updateStreak = (todayPractices, today) => {\n    const prayerKeys = ['fajr', 'dhuhr', 'asr', 'maghrib', 'isha'];\n    const todayCompleted = prayerKeys.filter(key => todayPractices[key]).length;\n    if (todayCompleted === 5) {\n      // Check if yesterday was also completed\n      const yesterday = new Date();\n      yesterday.setDate(yesterday.getDate() - 1);\n      const yesterdayKey = yesterday.toDateString();\n      const yesterdayPractices = practices[yesterdayKey] || {};\n      const yesterdayCompleted = prayerKeys.filter(key => yesterdayPractices[key]).length;\n      if (yesterdayCompleted === 5) {\n        setStreak(prev => prev + 1);\n      } else {\n        setStreak(1);\n      }\n    }\n  };\n  const saveToLocalStorage = () => {\n    localStorage.setItem('muslimDaily_practices', JSON.stringify(practices));\n    localStorage.setItem('muslimDaily_streak', streak.toString());\n  };\n  const markPracticeCompleted = (practiceType, timestamp = new Date()) => {\n    const dateKey = timestamp.toDateString();\n    setPractices(prev => ({\n      ...prev,\n      [dateKey]: {\n        ...prev[dateKey],\n        [practiceType]: {\n          completed: true,\n          timestamp: timestamp.toISOString(),\n          type: practiceType\n        }\n      }\n    }));\n  };\n  const markPracticeIncomplete = (practiceType, timestamp = new Date()) => {\n    const dateKey = timestamp.toDateString();\n    setPractices(prev => {\n      const updated = {\n        ...prev\n      };\n      if (updated[dateKey] && updated[dateKey][practiceType]) {\n        delete updated[dateKey][practiceType];\n      }\n      return updated;\n    });\n  };\n  const isPracticeCompleted = (practiceType, date = new Date()) => {\n    var _practices$dateKey, _practices$dateKey$pr;\n    const dateKey = date.toDateString();\n    return !!((_practices$dateKey = practices[dateKey]) !== null && _practices$dateKey !== void 0 && (_practices$dateKey$pr = _practices$dateKey[practiceType]) !== null && _practices$dateKey$pr !== void 0 && _practices$dateKey$pr.completed);\n  };\n  const getTodayPractices = () => {\n    const today = new Date().toDateString();\n    return practices[today] || {};\n  };\n  const getWeeklyProgress = () => {\n    const weekData = [];\n    const today = new Date();\n    for (let i = 6; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(date.getDate() - i);\n      const dateKey = date.toDateString();\n      const dayPractices = practices[dateKey] || {};\n      const prayerKeys = ['fajr', 'dhuhr', 'asr', 'maghrib', 'isha'];\n      const completed = prayerKeys.filter(key => dayPractices[key]).length;\n      weekData.push({\n        date: dateKey,\n        day: date.toLocaleDateString('en-US', {\n          weekday: 'short'\n        }),\n        completed,\n        total: 5\n      });\n    }\n    return weekData;\n  };\n  const value = {\n    practices,\n    streak,\n    todayStats,\n    markPracticeCompleted,\n    markPracticeIncomplete,\n    isPracticeCompleted,\n    getTodayPractices,\n    getWeeklyProgress\n  };\n  return /*#__PURE__*/_jsxDEV(PracticeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n_s2(PracticeProvider, \"aHlgoj4j77u/V6Csl4c4WE3bb7w=\");\n_c = PracticeProvider;\nvar _c;\n$RefreshReg$(_c, \"PracticeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","PracticeContext","usePractice","_s","context","Error","PracticeProvider","children","_s2","practices","setPractices","streak","setStreak","todayStats","setTodayStats","prayersCompleted","totalPrayers","progress","savedPractices","localStorage","getItem","savedStreak","JSON","parse","parseInt","updateTodayStats","saveToLocalStorage","today","Date","toDateString","todayPractices","prayerKeys","filter","key","length","updateStreak","todayCompleted","yesterday","setDate","getDate","yesterdayKey","yesterdayPractices","yesterdayCompleted","prev","setItem","stringify","toString","markPracticeCompleted","practiceType","timestamp","dateKey","completed","toISOString","type","markPracticeIncomplete","updated","isPracticeCompleted","date","_practices$dateKey","_practices$dateKey$pr","getTodayPractices","getWeeklyProgress","weekData","i","dayPractices","push","day","toLocaleDateString","weekday","total","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Rashid/muslim-daily/frontend/src/context/PracticeContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\nconst PracticeContext = createContext();\r\n\r\nexport const usePractice = () => {\r\n  const context = useContext(PracticeContext);\r\n  if (!context) {\r\n    throw new Error('usePractice must be used within a PracticeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const PracticeProvider = ({ children }) => {\r\n  const [practices, setPractices] = useState({});\r\n  const [streak, setStreak] = useState(0);\r\n  const [todayStats, setTodayStats] = useState({\r\n    prayersCompleted: 0,\r\n    totalPrayers: 5,\r\n    progress: 0\r\n  });\r\n\r\n  // Load practices from localStorage on app start\r\n  useEffect(() => {\r\n    const savedPractices = localStorage.getItem('muslimDaily_practices');\r\n    const savedStreak = localStorage.getItem('muslimDaily_streak');\r\n    \r\n    if (savedPractices) {\r\n      setPractices(JSON.parse(savedPractices));\r\n    }\r\n    \r\n    if (savedStreak) {\r\n      setStreak(parseInt(savedStreak));\r\n    }\r\n    \r\n    updateTodayStats();\r\n  }, []);\r\n\r\n  // Update today's stats whenever practices change\r\n  useEffect(() => {\r\n    updateTodayStats();\r\n    saveToLocalStorage();\r\n  }, [practices]);\r\n\r\n  const updateTodayStats = () => {\r\n    const today = new Date().toDateString();\r\n    const todayPractices = practices[today] || {};\r\n    const prayerKeys = ['fajr', 'dhuhr', 'asr', 'maghrib', 'isha'];\r\n    \r\n    const prayersCompleted = prayerKeys.filter(key => todayPractices[key]).length;\r\n    const progress = (prayersCompleted / 5) * 100;\r\n    \r\n    setTodayStats({\r\n      prayersCompleted,\r\n      totalPrayers: 5,\r\n      progress\r\n    });\r\n\r\n    // Update streak\r\n    updateStreak(todayPractices, today);\r\n  };\r\n\r\n  const updateStreak = (todayPractices, today) => {\r\n    const prayerKeys = ['fajr', 'dhuhr', 'asr', 'maghrib', 'isha'];\r\n    const todayCompleted = prayerKeys.filter(key => todayPractices[key]).length;\r\n    \r\n    if (todayCompleted === 5) {\r\n      // Check if yesterday was also completed\r\n      const yesterday = new Date();\r\n      yesterday.setDate(yesterday.getDate() - 1);\r\n      const yesterdayKey = yesterday.toDateString();\r\n      const yesterdayPractices = practices[yesterdayKey] || {};\r\n      const yesterdayCompleted = prayerKeys.filter(key => yesterdayPractices[key]).length;\r\n      \r\n      if (yesterdayCompleted === 5) {\r\n        setStreak(prev => prev + 1);\r\n      } else {\r\n        setStreak(1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const saveToLocalStorage = () => {\r\n    localStorage.setItem('muslimDaily_practices', JSON.stringify(practices));\r\n    localStorage.setItem('muslimDaily_streak', streak.toString());\r\n  };\r\n\r\n  const markPracticeCompleted = (practiceType, timestamp = new Date()) => {\r\n    const dateKey = timestamp.toDateString();\r\n    \r\n    setPractices(prev => ({\r\n      ...prev,\r\n      [dateKey]: {\r\n        ...prev[dateKey],\r\n        [practiceType]: {\r\n          completed: true,\r\n          timestamp: timestamp.toISOString(),\r\n          type: practiceType\r\n        }\r\n      }\r\n    }));\r\n  };\r\n\r\n  const markPracticeIncomplete = (practiceType, timestamp = new Date()) => {\r\n    const dateKey = timestamp.toDateString();\r\n    \r\n    setPractices(prev => {\r\n      const updated = { ...prev };\r\n      if (updated[dateKey] && updated[dateKey][practiceType]) {\r\n        delete updated[dateKey][practiceType];\r\n      }\r\n      return updated;\r\n    });\r\n  };\r\n\r\n  const isPracticeCompleted = (practiceType, date = new Date()) => {\r\n    const dateKey = date.toDateString();\r\n    return !!practices[dateKey]?.[practiceType]?.completed;\r\n  };\r\n\r\n  const getTodayPractices = () => {\r\n    const today = new Date().toDateString();\r\n    return practices[today] || {};\r\n  };\r\n\r\n  const getWeeklyProgress = () => {\r\n    const weekData = [];\r\n    const today = new Date();\r\n    \r\n    for (let i = 6; i >= 0; i--) {\r\n      const date = new Date(today);\r\n      date.setDate(date.getDate() - i);\r\n      const dateKey = date.toDateString();\r\n      const dayPractices = practices[dateKey] || {};\r\n      const prayerKeys = ['fajr', 'dhuhr', 'asr', 'maghrib', 'isha'];\r\n      const completed = prayerKeys.filter(key => dayPractices[key]).length;\r\n      \r\n      weekData.push({\r\n        date: dateKey,\r\n        day: date.toLocaleDateString('en-US', { weekday: 'short' }),\r\n        completed,\r\n        total: 5\r\n      });\r\n    }\r\n    \r\n    return weekData;\r\n  };\r\n\r\n  const value = {\r\n    practices,\r\n    streak,\r\n    todayStats,\r\n    markPracticeCompleted,\r\n    markPracticeIncomplete,\r\n    isPracticeCompleted,\r\n    getTodayPractices,\r\n    getWeeklyProgress\r\n  };\r\n\r\n  return (\r\n    <PracticeContext.Provider value={value}>\r\n      {children}\r\n    </PracticeContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}