{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rashid\\\\muslim-daily\\\\frontend\\\\src\\\\components\\\\PrayerTimes\\\\PrayerTimes.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, Typography, Box, Chip, Button, Select, MenuItem, FormControl, InputLabel, CircularProgress, IconButton } from '@mui/material';\nimport { LocationOn, Refresh, MyLocation, CheckCircle, RadioButtonUnchecked } from '@mui/icons-material';\nimport { usePractice } from '../../context/PracticeContext';\n\n// Accurate Malaysia zone codes for e-solat API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst malaysianZones = {\n  // Wilayah Persekutuan\n  'Kuala Lumpur': 'WLY01',\n  'Putrajaya': 'WLY02',\n  // Selangor\n  'Kajang, Selangor': 'SGR01',\n  'Shah Alam': 'SGR02',\n  'Petaling Jaya': 'SGR03',\n  'Klang': 'SGR04',\n  'Subang Jaya': 'SGR03',\n  // Same as Petaling Jaya\n  'Ampang': 'SGR01',\n  // Same as Kajang\n  'Cheras': 'SGR01',\n  // Same as Kajang\n  'Puchong': 'SGR03',\n  // Same as Petaling Jaya\n\n  // Johor\n  'Johor Bahru': 'JHR01',\n  // Pulau Pinang\n  'Penang': 'PNG01',\n  'Butterworth': 'PNG02',\n  // Perak\n  'Ipoh': 'PRK01',\n  'Taiping': 'PRK02',\n  // Kelantan\n  'Kota Bharu': 'KTN01',\n  // Terengganu\n  'Kuala Terengganu': 'TRG01',\n  // Pahang\n  'Kuantan': 'PHG01',\n  // Melaka\n  'Malacca': 'MLK01',\n  // Negeri Sembilan\n  'Seremban': 'NSN01',\n  // Kedah\n  'Alor Setar': 'KDH01',\n  // Sabah\n  'Kota Kinabalu': 'SBH01',\n  'Sandakan': 'SBH02',\n  'Tawau': 'SBH03',\n  'Lahad Datu': 'SBH04',\n  // Sarawak\n  'Kuching': 'SWK01',\n  'Miri': 'SWK02',\n  'Sibu': 'SWK03',\n  'Bintulu': 'SWK04',\n  // Labuan\n  'Labuan': 'LBN01'\n};\n\n// Better GPS to zone mapping\nconst gpsToZoneMapping = [\n// Northern Region (Kedah, Perlis, Penang)\n{\n  minLat: 5.5,\n  maxLat: 7.0,\n  minLng: 99.0,\n  maxLng: 101.0,\n  zone: 'KDH01'\n}, {\n  minLat: 5.0,\n  maxLat: 5.5,\n  minLng: 99.0,\n  maxLng: 101.0,\n  zone: 'PNG01'\n},\n// Central Region (KL, Selangor, Putrajaya)\n{\n  minLat: 2.5,\n  maxLat: 4.0,\n  minLng: 100.5,\n  maxLng: 102.0,\n  zone: 'WLY01'\n}, {\n  minLat: 2.5,\n  maxLat: 4.0,\n  minLng: 100.5,\n  maxLng: 102.0,\n  zone: 'SGR01'\n},\n// Southern Region (Johor, Melaka)\n{\n  minLat: 1.0,\n  maxLat: 2.5,\n  minLng: 102.5,\n  maxLng: 104.0,\n  zone: 'JHR01'\n}, {\n  minLat: 1.0,\n  maxLat: 2.5,\n  minLng: 101.5,\n  maxLng: 102.5,\n  zone: 'MLK01'\n},\n// East Coast (Kelantan, Terengganu)\n{\n  minLat: 4.0,\n  maxLat: 6.5,\n  minLng: 101.5,\n  maxLng: 103.5,\n  zone: 'KTN01'\n}, {\n  minLat: 4.0,\n  maxLat: 6.0,\n  minLng: 102.5,\n  maxLng: 103.5,\n  zone: 'TRG01'\n},\n// East Malaysia (Sabah, Sarawak)\n{\n  minLat: 4.0,\n  maxLat: 7.5,\n  minLng: 115.0,\n  maxLng: 119.0,\n  zone: 'SBH01'\n}, {\n  minLat: 1.0,\n  maxLat: 4.0,\n  minLng: 109.0,\n  maxLng: 115.0,\n  zone: 'SWK01'\n}];\nconst PrayerTimes = () => {\n  _s();\n  const [prayerTimes, setPrayerTimes] = useState(null);\n  const [nextPrayer, setNextPrayer] = useState(null);\n  const [selectedCity, setSelectedCity] = useState('Kuala Lumpur');\n  const [loading, setLoading] = useState(true);\n  const [userLocation, setUserLocation] = useState(null);\n  const [usingGPS, setUsingGPS] = useState(false);\n  const [currentZone, setCurrentZone] = useState('WLY01');\n  const {\n    markPracticeCompleted,\n    markPracticeIncomplete,\n    isPracticeCompleted,\n    todayStats\n  } = usePractice();\n\n  // Get prayer times from e-solat API\n  const getPrayerTimesFromESolat = async zoneCode => {\n    try {\n      const today = new Date();\n      const year = today.getFullYear();\n      const month = today.getMonth() + 1;\n      const day = today.getDate();\n      console.log(`Fetching prayer times for zone: ${zoneCode}`);\n      const response = await fetch(`https://www.e-solat.gov.my/index.php?r=esolatApi/takwimsolat&period=date&zone=${zoneCode}&date=${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (data.prayerTime && data.prayerTime.length > 0) {\n        const times = data.prayerTime[0];\n        console.log('Received prayer times:', times);\n        return {\n          fajr: times.fajr,\n          dhuhr: times.dhuhr,\n          asr: times.asr,\n          maghrib: times.maghrib,\n          isha: times.isha,\n          method: 'JAKIM e-solat API',\n          zone: zoneCode,\n          calculated: false,\n          success: true\n        };\n      }\n      throw new Error('No prayer times data received');\n    } catch (error) {\n      console.error('e-solat API error:', error);\n      throw error;\n    }\n  };\n\n  // Improved GPS to zone mapping\n  const findNearestZone = (lat, lng) => {\n    for (const region of gpsToZoneMapping) {\n      if (lat >= region.minLat && lat <= region.maxLat && lng >= region.minLng && lng <= region.maxLng) {\n        console.log(`GPS ${lat},${lng} mapped to zone: ${region.zone}`);\n        return region.zone;\n      }\n    }\n\n    // Fallback based on latitude\n    if (lat > 4.0) return 'KDH01'; // Northern\n    if (lat > 2.5) return 'WLY01'; // Central  \n    if (lat > 1.0) return 'JHR01'; // Southern\n    return 'WLY01'; // Default\n  };\n  const loadPrayerTimes = async (city = selectedCity, zoneCode = null) => {\n    setLoading(true);\n    try {\n      let times;\n      let zone = zoneCode;\n      if (usingGPS && userLocation) {\n        // Use GPS location to find nearest zone\n        zone = findNearestZone(userLocation.latitude, userLocation.longitude);\n        times = await getPrayerTimesFromESolat(zone);\n      } else if (zoneCode) {\n        // Use provided zone code\n        times = await getPrayerTimesFromESolat(zoneCode);\n      } else {\n        // Use selected city's zone code\n        zone = malaysianZones[city];\n        if (!zone) {\n          throw new Error(`Zone code not found for: ${city}`);\n        }\n        times = await getPrayerTimesFromESolat(zone);\n      }\n      setCurrentZone(zone);\n      setPrayerTimes(times);\n      setNextPrayer(getNextPrayer(times));\n      console.log('Prayer times loaded successfully:', times);\n    } catch (error) {\n      console.error('Error loading prayer times:', error);\n      // Fallback to KL times\n      try {\n        const fallbackTimes = await getPrayerTimesFromESolat('WLY01');\n        setPrayerTimes(fallbackTimes);\n        setNextPrayer(getNextPrayer(fallbackTimes));\n        setCurrentZone('WLY01');\n      } catch (fallbackError) {\n        console.error('Fallback also failed:', fallbackError);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleGetLocation = async () => {\n    try {\n      setLoading(true);\n      const location = await new Promise((resolve, reject) => {\n        if (!navigator.geolocation) {\n          reject(new Error('Geolocation not supported'));\n          return;\n        }\n        navigator.geolocation.getCurrentPosition(position => resolve({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n          accuracy: position.coords.accuracy\n        }), error => reject(error), {\n          enableHighAccuracy: true,\n          timeout: 15000,\n          maximumAge: 60000\n        });\n      });\n      setUserLocation(location);\n      setUsingGPS(true);\n\n      // Load times for nearest zone\n      await loadPrayerTimes(null, findNearestZone(location.latitude, location.longitude));\n      console.log('GPS Location found and prayer times loaded:', location);\n    } catch (error) {\n      console.error('Location error:', error);\n      alert('Unable to get your location. Using Kuala Lumpur instead.');\n      setUsingGPS(false);\n      setSelectedCity('Kuala Lumpur');\n      await loadPrayerTimes('Kuala Lumpur');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleCityChange = async city => {\n    setSelectedCity(city);\n    setUsingGPS(false);\n    await loadPrayerTimes(city);\n  };\n  const handlePracticeToggle = prayerName => {\n    const prayerType = prayerName.toLowerCase();\n    if (isPracticeCompleted(prayerType)) {\n      markPracticeIncomplete(prayerType);\n    } else {\n      markPracticeCompleted(prayerType);\n    }\n  };\n\n  // Get next prayer\n  const getNextPrayer = prayerTimes => {\n    if (!prayerTimes) return null;\n    const now = new Date();\n    const prayers = [{\n      name: 'Fajr',\n      time: prayerTimes.fajr\n    }, {\n      name: 'Dhuhr',\n      time: prayerTimes.dhuhr\n    }, {\n      name: 'Asr',\n      time: prayerTimes.asr\n    }, {\n      name: 'Maghrib',\n      time: prayerTimes.maghrib\n    }, {\n      name: 'Isha',\n      time: prayerTimes.isha\n    }];\n    for (let prayer of prayers) {\n      const prayerTime = parseTimeString(prayer.time);\n      if (prayerTime > now) {\n        return {\n          name: prayer.name,\n          time: prayer.time,\n          timeObject: prayerTime\n        };\n      }\n    }\n\n    // If all prayers passed, return first prayer of next day\n    const tomorrow = new Date(now);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    const fajrTime = parseTimeString(prayerTimes.fajr);\n    tomorrow.setHours(fajrTime.getHours(), fajrTime.getMinutes(), 0, 0);\n    return {\n      name: 'Fajr',\n      time: prayerTimes.fajr,\n      timeObject: tomorrow,\n      isTomorrow: true\n    };\n  };\n\n  // Helper function to parse time strings\n  const parseTimeString = timeStr => {\n    if (!timeStr) return new Date();\n    const [time, modifier] = timeStr.split(' ');\n    let [hours, minutes] = time.split(':');\n    hours = parseInt(hours);\n    minutes = parseInt(minutes);\n    if (modifier === 'PM' && hours < 12) hours += 12;\n    if (modifier === 'AM' && hours === 12) hours = 0;\n    const date = new Date();\n    date.setHours(hours, minutes, 0, 0);\n    return date;\n  };\n  useEffect(() => {\n    loadPrayerTimes();\n  }, []);\n  const prayers = [{\n    name: 'Fajr',\n    time: prayerTimes === null || prayerTimes === void 0 ? void 0 : prayerTimes.fajr,\n    icon: '🌅',\n    type: 'fajr'\n  }, {\n    name: 'Dhuhr',\n    time: prayerTimes === null || prayerTimes === void 0 ? void 0 : prayerTimes.dhuhr,\n    icon: '☀️',\n    type: 'dhuhr'\n  }, {\n    name: 'Asr',\n    time: prayerTimes === null || prayerTimes === void 0 ? void 0 : prayerTimes.asr,\n    icon: '🌇',\n    type: 'asr'\n  }, {\n    name: 'Maghrib',\n    time: prayerTimes === null || prayerTimes === void 0 ? void 0 : prayerTimes.maghrib,\n    icon: '🌆',\n    type: 'maghrib'\n  }, {\n    name: 'Isha',\n    time: prayerTimes === null || prayerTimes === void 0 ? void 0 : prayerTimes.isha,\n    icon: '🌙',\n    type: 'isha'\n  }];\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        borderRadius: 3,\n        boxShadow: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        sx: {\n          textAlign: 'center',\n          py: 4\n        },\n        children: [/*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          sx: {\n            mt: 2\n          },\n          children: \"Loading prayer times from JAKIM...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      borderRadius: 3,\n      boxShadow: 3\n    },\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              display: 'flex',\n              alignItems: 'center',\n              gap: 1\n            },\n            children: \"\\uD83D\\uDD4C Prayer Times\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"primary.main\",\n            sx: {\n              mt: 0.5\n            },\n            children: [todayStats.prayersCompleted, \"/5 prayers completed today\", usingGPS && ' • Using GPS Location']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            gap: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            size: \"small\",\n            startIcon: /*#__PURE__*/_jsxDEV(MyLocation, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 26\n            }, this),\n            onClick: handleGetLocation,\n            disabled: loading,\n            variant: usingGPS ? \"contained\" : \"outlined\",\n            color: usingGPS ? \"success\" : \"primary\",\n            children: \"My Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            size: \"small\",\n            startIcon: /*#__PURE__*/_jsxDEV(Refresh, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 26\n            }, this),\n            onClick: () => loadPrayerTimes(),\n            disabled: loading,\n            children: \"Refresh\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            mb: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"text.secondary\",\n            children: \"Today's Progress\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"primary.main\",\n            fontWeight: \"bold\",\n            children: [todayStats.prayersCompleted, \"/5\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            width: '100%',\n            height: 8,\n            backgroundColor: 'grey.200',\n            borderRadius: 4,\n            overflow: 'hidden'\n          },\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              width: `${todayStats.progress}%`,\n              height: '100%',\n              backgroundColor: 'primary.main',\n              borderRadius: 4,\n              transition: 'width 0.3s ease'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          children: \"Location\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          value: usingGPS ? 'GPS Location' : selectedCity,\n          label: \"Location\",\n          onChange: e => {\n            if (e.target.value !== 'GPS Location') {\n              handleCityChange(e.target.value);\n            }\n          },\n          children: [usingGPS && /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"GPS Location\",\n            disabled: true,\n            children: [\"\\uD83D\\uDCCD Using GPS Location (\", currentZone, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 15\n          }, this), Object.keys(malaysianZones).map(city => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: city,\n            children: [city, \" (\", malaysianZones[city], \")\"]\n          }, city, true, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this), nextPrayer && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          bgcolor: 'primary.main',\n          color: 'white',\n          p: 2,\n          borderRadius: 2,\n          mb: 3,\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"\\uD83C\\uDFAF Next Prayer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          fontWeight: \"bold\",\n          children: nextPrayer.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: [nextPrayer.time, nextPrayer.isTomorrow && ' (Tomorrow)']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 2\n        },\n        children: prayers.map(prayer => {\n          const isCompleted = isPracticeCompleted(prayer.type);\n          const isNextPrayer = (nextPrayer === null || nextPrayer === void 0 ? void 0 : nextPrayer.name) === prayer.name;\n          return /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              p: 2,\n              borderRadius: 2,\n              bgcolor: isNextPrayer ? 'action.hover' : 'transparent',\n              border: isNextPrayer ? '2px solid' : '1px solid',\n              borderColor: isNextPrayer ? 'primary.main' : 'divider',\n              opacity: isCompleted ? 0.8 : 1\n            },\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                gap: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h5\",\n                children: prayer.icon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 493,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  sx: {\n                    textDecoration: isCompleted ? 'line-through' : 'none',\n                    color: isCompleted ? 'text.secondary' : 'text.primary'\n                  },\n                  children: prayer.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 495,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  color: \"text.secondary\",\n                  children: prayer.time || '--:--'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 504,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 494,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                gap: 1\n              },\n              children: [isNextPrayer && /*#__PURE__*/_jsxDEV(Chip, {\n                label: \"Next\",\n                color: \"primary\",\n                size: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 512,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: () => handlePracticeToggle(prayer.type),\n                color: isCompleted ? \"success\" : \"default\",\n                sx: {\n                  border: isCompleted ? '2px solid' : '1px solid',\n                  borderColor: isCompleted ? 'success.main' : 'grey.400'\n                },\n                children: isCompleted ? /*#__PURE__*/_jsxDEV(CheckCircle, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 527,\n                  columnNumber: 36\n                }, this) : /*#__PURE__*/_jsxDEV(RadioButtonUnchecked, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 527,\n                  columnNumber: 54\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 519,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 17\n            }, this)]\n          }, prayer.name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 2,\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          color: \"text.secondary\",\n          children: [\"Source: JAKIM e-solat.gov.my \\u2022 Zone: \", currentZone]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          color: \"text.secondary\",\n          children: usingGPS ? '📍 Using your GPS location' : `📍 ${selectedCity}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          color: \"text.secondary\",\n          children: \"Tap circle to mark prayer as completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 358,\n    columnNumber: 5\n  }, this);\n};\n_s(PrayerTimes, \"bGnzo8PI7w8LOUY0UoAVKmiCQQU=\", false, function () {\n  return [usePractice];\n});\n_c = PrayerTimes;\nexport default PrayerTimes;\nvar _c;\n$RefreshReg$(_c, \"PrayerTimes\");","map":{"version":3,"names":["React","useState","useEffect","Card","CardContent","Typography","Box","Chip","Button","Select","MenuItem","FormControl","InputLabel","CircularProgress","IconButton","LocationOn","Refresh","MyLocation","CheckCircle","RadioButtonUnchecked","usePractice","jsxDEV","_jsxDEV","malaysianZones","gpsToZoneMapping","minLat","maxLat","minLng","maxLng","zone","PrayerTimes","_s","prayerTimes","setPrayerTimes","nextPrayer","setNextPrayer","selectedCity","setSelectedCity","loading","setLoading","userLocation","setUserLocation","usingGPS","setUsingGPS","currentZone","setCurrentZone","markPracticeCompleted","markPracticeIncomplete","isPracticeCompleted","todayStats","getPrayerTimesFromESolat","zoneCode","today","Date","year","getFullYear","month","getMonth","day","getDate","console","log","response","fetch","toString","padStart","ok","Error","status","data","json","prayerTime","length","times","fajr","dhuhr","asr","maghrib","isha","method","calculated","success","error","findNearestZone","lat","lng","region","loadPrayerTimes","city","latitude","longitude","getNextPrayer","fallbackTimes","fallbackError","handleGetLocation","location","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","accuracy","enableHighAccuracy","timeout","maximumAge","alert","handleCityChange","handlePracticeToggle","prayerName","prayerType","toLowerCase","now","prayers","name","time","prayer","parseTimeString","timeObject","tomorrow","setDate","fajrTime","setHours","getHours","getMinutes","isTomorrow","timeStr","modifier","split","hours","minutes","parseInt","date","icon","type","sx","borderRadius","boxShadow","children","textAlign","py","fileName","_jsxFileName","lineNumber","columnNumber","variant","mt","display","justifyContent","alignItems","mb","gap","color","prayersCompleted","size","startIcon","onClick","disabled","fontWeight","width","height","backgroundColor","overflow","progress","transition","fullWidth","value","label","onChange","e","target","Object","keys","map","bgcolor","p","gutterBottom","flexDirection","isCompleted","isNextPrayer","border","borderColor","opacity","textDecoration","_c","$RefreshReg$"],"sources":["C:/Users/Rashid/muslim-daily/frontend/src/components/PrayerTimes/PrayerTimes.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Box,\r\n  Chip,\r\n  Button,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  CircularProgress,\r\n  IconButton\r\n} from '@mui/material';\r\nimport { LocationOn, Refresh, MyLocation, CheckCircle, RadioButtonUnchecked } from '@mui/icons-material';\r\nimport { usePractice } from '../../context/PracticeContext';\r\n\r\n// Accurate Malaysia zone codes for e-solat API\r\nconst malaysianZones = {\r\n  // Wilayah Persekutuan\r\n  'Kuala Lumpur': 'WLY01',\r\n  'Putrajaya': 'WLY02',\r\n  \r\n  // Selangor\r\n  'Kajang, Selangor': 'SGR01',\r\n  'Shah Alam': 'SGR02', \r\n  'Petaling Jaya': 'SGR03',\r\n  'Klang': 'SGR04',\r\n  'Subang Jaya': 'SGR03', // Same as Petaling Jaya\r\n  'Ampang': 'SGR01', // Same as Kajang\r\n  'Cheras': 'SGR01', // Same as Kajang\r\n  'Puchong': 'SGR03', // Same as Petaling Jaya\r\n  \r\n  // Johor\r\n  'Johor Bahru': 'JHR01',\r\n  \r\n  // Pulau Pinang\r\n  'Penang': 'PNG01',\r\n  'Butterworth': 'PNG02',\r\n  \r\n  // Perak\r\n  'Ipoh': 'PRK01',\r\n  'Taiping': 'PRK02',\r\n  \r\n  // Kelantan\r\n  'Kota Bharu': 'KTN01',\r\n  \r\n  // Terengganu\r\n  'Kuala Terengganu': 'TRG01',\r\n  \r\n  // Pahang\r\n  'Kuantan': 'PHG01',\r\n  \r\n  // Melaka\r\n  'Malacca': 'MLK01',\r\n  \r\n  // Negeri Sembilan\r\n  'Seremban': 'NSN01',\r\n  \r\n  // Kedah\r\n  'Alor Setar': 'KDH01',\r\n  \r\n  // Sabah\r\n  'Kota Kinabalu': 'SBH01',\r\n  'Sandakan': 'SBH02',\r\n  'Tawau': 'SBH03',\r\n  'Lahad Datu': 'SBH04',\r\n  \r\n  // Sarawak\r\n  'Kuching': 'SWK01',\r\n  'Miri': 'SWK02',\r\n  'Sibu': 'SWK03',\r\n  'Bintulu': 'SWK04',\r\n  \r\n  // Labuan\r\n  'Labuan': 'LBN01'\r\n};\r\n\r\n// Better GPS to zone mapping\r\nconst gpsToZoneMapping = [\r\n  // Northern Region (Kedah, Perlis, Penang)\r\n  { minLat: 5.5, maxLat: 7.0, minLng: 99.0, maxLng: 101.0, zone: 'KDH01' },\r\n  { minLat: 5.0, maxLat: 5.5, minLng: 99.0, maxLng: 101.0, zone: 'PNG01' },\r\n  \r\n  // Central Region (KL, Selangor, Putrajaya)\r\n  { minLat: 2.5, maxLat: 4.0, minLng: 100.5, maxLng: 102.0, zone: 'WLY01' },\r\n  { minLat: 2.5, maxLat: 4.0, minLng: 100.5, maxLng: 102.0, zone: 'SGR01' },\r\n  \r\n  // Southern Region (Johor, Melaka)\r\n  { minLat: 1.0, maxLat: 2.5, minLng: 102.5, maxLng: 104.0, zone: 'JHR01' },\r\n  { minLat: 1.0, maxLat: 2.5, minLng: 101.5, maxLng: 102.5, zone: 'MLK01' },\r\n  \r\n  // East Coast (Kelantan, Terengganu)\r\n  { minLat: 4.0, maxLat: 6.5, minLng: 101.5, maxLng: 103.5, zone: 'KTN01' },\r\n  { minLat: 4.0, maxLat: 6.0, minLng: 102.5, maxLng: 103.5, zone: 'TRG01' },\r\n  \r\n  // East Malaysia (Sabah, Sarawak)\r\n  { minLat: 4.0, maxLat: 7.5, minLng: 115.0, maxLng: 119.0, zone: 'SBH01' },\r\n  { minLat: 1.0, maxLat: 4.0, minLng: 109.0, maxLng: 115.0, zone: 'SWK01' }\r\n];\r\n\r\nconst PrayerTimes = () => {\r\n  const [prayerTimes, setPrayerTimes] = useState(null);\r\n  const [nextPrayer, setNextPrayer] = useState(null);\r\n  const [selectedCity, setSelectedCity] = useState('Kuala Lumpur');\r\n  const [loading, setLoading] = useState(true);\r\n  const [userLocation, setUserLocation] = useState(null);\r\n  const [usingGPS, setUsingGPS] = useState(false);\r\n  const [currentZone, setCurrentZone] = useState('WLY01');\r\n  \r\n  const { markPracticeCompleted, markPracticeIncomplete, isPracticeCompleted, todayStats } = usePractice();\r\n\r\n  // Get prayer times from e-solat API\r\n  const getPrayerTimesFromESolat = async (zoneCode) => {\r\n    try {\r\n      const today = new Date();\r\n      const year = today.getFullYear();\r\n      const month = today.getMonth() + 1;\r\n      const day = today.getDate();\r\n      \r\n      console.log(`Fetching prayer times for zone: ${zoneCode}`);\r\n      \r\n      const response = await fetch(\r\n        `https://www.e-solat.gov.my/index.php?r=esolatApi/takwimsolat&period=date&zone=${zoneCode}&date=${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`\r\n      );\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (data.prayerTime && data.prayerTime.length > 0) {\r\n        const times = data.prayerTime[0];\r\n        console.log('Received prayer times:', times);\r\n        return {\r\n          fajr: times.fajr,\r\n          dhuhr: times.dhuhr,\r\n          asr: times.asr,\r\n          maghrib: times.maghrib,\r\n          isha: times.isha,\r\n          method: 'JAKIM e-solat API',\r\n          zone: zoneCode,\r\n          calculated: false,\r\n          success: true\r\n        };\r\n      }\r\n      throw new Error('No prayer times data received');\r\n    } catch (error) {\r\n      console.error('e-solat API error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Improved GPS to zone mapping\r\n  const findNearestZone = (lat, lng) => {\r\n    for (const region of gpsToZoneMapping) {\r\n      if (lat >= region.minLat && lat <= region.maxLat && \r\n          lng >= region.minLng && lng <= region.maxLng) {\r\n        console.log(`GPS ${lat},${lng} mapped to zone: ${region.zone}`);\r\n        return region.zone;\r\n      }\r\n    }\r\n    \r\n    // Fallback based on latitude\r\n    if (lat > 4.0) return 'KDH01'; // Northern\r\n    if (lat > 2.5) return 'WLY01'; // Central  \r\n    if (lat > 1.0) return 'JHR01'; // Southern\r\n    return 'WLY01'; // Default\r\n  };\r\n\r\n  const loadPrayerTimes = async (city = selectedCity, zoneCode = null) => {\r\n    setLoading(true);\r\n    try {\r\n      let times;\r\n      let zone = zoneCode;\r\n      \r\n      if (usingGPS && userLocation) {\r\n        // Use GPS location to find nearest zone\r\n        zone = findNearestZone(userLocation.latitude, userLocation.longitude);\r\n        times = await getPrayerTimesFromESolat(zone);\r\n      } else if (zoneCode) {\r\n        // Use provided zone code\r\n        times = await getPrayerTimesFromESolat(zoneCode);\r\n      } else {\r\n        // Use selected city's zone code\r\n        zone = malaysianZones[city];\r\n        if (!zone) {\r\n          throw new Error(`Zone code not found for: ${city}`);\r\n        }\r\n        times = await getPrayerTimesFromESolat(zone);\r\n      }\r\n      \r\n      setCurrentZone(zone);\r\n      setPrayerTimes(times);\r\n      setNextPrayer(getNextPrayer(times));\r\n      \r\n      console.log('Prayer times loaded successfully:', times);\r\n    } catch (error) {\r\n      console.error('Error loading prayer times:', error);\r\n      // Fallback to KL times\r\n      try {\r\n        const fallbackTimes = await getPrayerTimesFromESolat('WLY01');\r\n        setPrayerTimes(fallbackTimes);\r\n        setNextPrayer(getNextPrayer(fallbackTimes));\r\n        setCurrentZone('WLY01');\r\n      } catch (fallbackError) {\r\n        console.error('Fallback also failed:', fallbackError);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleGetLocation = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const location = await new Promise((resolve, reject) => {\r\n        if (!navigator.geolocation) {\r\n          reject(new Error('Geolocation not supported'));\r\n          return;\r\n        }\r\n\r\n        navigator.geolocation.getCurrentPosition(\r\n          (position) => resolve({\r\n            latitude: position.coords.latitude,\r\n            longitude: position.coords.longitude,\r\n            accuracy: position.coords.accuracy\r\n          }),\r\n          (error) => reject(error),\r\n          {\r\n            enableHighAccuracy: true,\r\n            timeout: 15000,\r\n            maximumAge: 60000\r\n          }\r\n        );\r\n      });\r\n\r\n      setUserLocation(location);\r\n      setUsingGPS(true);\r\n      \r\n      // Load times for nearest zone\r\n      await loadPrayerTimes(null, findNearestZone(location.latitude, location.longitude));\r\n      \r\n      console.log('GPS Location found and prayer times loaded:', location);\r\n    } catch (error) {\r\n      console.error('Location error:', error);\r\n      alert('Unable to get your location. Using Kuala Lumpur instead.');\r\n      setUsingGPS(false);\r\n      setSelectedCity('Kuala Lumpur');\r\n      await loadPrayerTimes('Kuala Lumpur');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCityChange = async (city) => {\r\n    setSelectedCity(city);\r\n    setUsingGPS(false);\r\n    await loadPrayerTimes(city);\r\n  };\r\n\r\n  const handlePracticeToggle = (prayerName) => {\r\n    const prayerType = prayerName.toLowerCase();\r\n    \r\n    if (isPracticeCompleted(prayerType)) {\r\n      markPracticeIncomplete(prayerType);\r\n    } else {\r\n      markPracticeCompleted(prayerType);\r\n    }\r\n  };\r\n\r\n  // Get next prayer\r\n  const getNextPrayer = (prayerTimes) => {\r\n    if (!prayerTimes) return null;\r\n    \r\n    const now = new Date();\r\n    const prayers = [\r\n      { name: 'Fajr', time: prayerTimes.fajr },\r\n      { name: 'Dhuhr', time: prayerTimes.dhuhr },\r\n      { name: 'Asr', time: prayerTimes.asr },\r\n      { name: 'Maghrib', time: prayerTimes.maghrib },\r\n      { name: 'Isha', time: prayerTimes.isha }\r\n    ];\r\n\r\n    for (let prayer of prayers) {\r\n      const prayerTime = parseTimeString(prayer.time);\r\n      \r\n      if (prayerTime > now) {\r\n        return {\r\n          name: prayer.name,\r\n          time: prayer.time,\r\n          timeObject: prayerTime\r\n        };\r\n      }\r\n    }\r\n\r\n    // If all prayers passed, return first prayer of next day\r\n    const tomorrow = new Date(now);\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    const fajrTime = parseTimeString(prayerTimes.fajr);\r\n    tomorrow.setHours(fajrTime.getHours(), fajrTime.getMinutes(), 0, 0);\r\n    \r\n    return {\r\n      name: 'Fajr',\r\n      time: prayerTimes.fajr,\r\n      timeObject: tomorrow,\r\n      isTomorrow: true\r\n    };\r\n  };\r\n\r\n  // Helper function to parse time strings\r\n  const parseTimeString = (timeStr) => {\r\n    if (!timeStr) return new Date();\r\n    \r\n    const [time, modifier] = timeStr.split(' ');\r\n    let [hours, minutes] = time.split(':');\r\n    \r\n    hours = parseInt(hours);\r\n    minutes = parseInt(minutes);\r\n    \r\n    if (modifier === 'PM' && hours < 12) hours += 12;\r\n    if (modifier === 'AM' && hours === 12) hours = 0;\r\n    \r\n    const date = new Date();\r\n    date.setHours(hours, minutes, 0, 0);\r\n    return date;\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadPrayerTimes();\r\n  }, []);\r\n\r\n  const prayers = [\r\n    { name: 'Fajr', time: prayerTimes?.fajr, icon: '🌅', type: 'fajr' },\r\n    { name: 'Dhuhr', time: prayerTimes?.dhuhr, icon: '☀️', type: 'dhuhr' },\r\n    { name: 'Asr', time: prayerTimes?.asr, icon: '🌇', type: 'asr' },\r\n    { name: 'Maghrib', time: prayerTimes?.maghrib, icon: '🌆', type: 'maghrib' },\r\n    { name: 'Isha', time: prayerTimes?.isha, icon: '🌙', type: 'isha' }\r\n  ];\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card sx={{ borderRadius: 3, boxShadow: 3 }}>\r\n        <CardContent sx={{ textAlign: 'center', py: 4 }}>\r\n          <CircularProgress />\r\n          <Typography variant=\"body1\" sx={{ mt: 2 }}>\r\n            Loading prayer times from JAKIM...\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card sx={{ borderRadius: 3, boxShadow: 3 }}>\r\n      <CardContent>\r\n        {/* Header with Progress */}\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n          <Box>\r\n            <Typography variant=\"h5\" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n              🕌 Prayer Times\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"primary.main\" sx={{ mt: 0.5 }}>\r\n              {todayStats.prayersCompleted}/5 prayers completed today\r\n              {usingGPS && ' • Using GPS Location'}\r\n            </Typography>\r\n          </Box>\r\n          \r\n          <Box sx={{ display: 'flex', gap: 1 }}>\r\n            <Button\r\n              size=\"small\"\r\n              startIcon={<MyLocation />}\r\n              onClick={handleGetLocation}\r\n              disabled={loading}\r\n              variant={usingGPS ? \"contained\" : \"outlined\"}\r\n              color={usingGPS ? \"success\" : \"primary\"}\r\n            >\r\n              My Location\r\n            </Button>\r\n            <Button\r\n              size=\"small\"\r\n              startIcon={<Refresh />}\r\n              onClick={() => loadPrayerTimes()}\r\n              disabled={loading}\r\n            >\r\n              Refresh\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n\r\n        {/* Progress Bar */}\r\n        <Box sx={{ mb: 3 }}>\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              Today's Progress\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"primary.main\" fontWeight=\"bold\">\r\n              {todayStats.prayersCompleted}/5\r\n            </Typography>\r\n          </Box>\r\n          <Box sx={{ \r\n            width: '100%', \r\n            height: 8, \r\n            backgroundColor: 'grey.200', \r\n            borderRadius: 4,\r\n            overflow: 'hidden'\r\n          }}>\r\n            <Box \r\n              sx={{ \r\n                width: `${todayStats.progress}%`, \r\n                height: '100%', \r\n                backgroundColor: 'primary.main',\r\n                borderRadius: 4,\r\n                transition: 'width 0.3s ease'\r\n              }}\r\n            />\r\n          </Box>\r\n        </Box>\r\n\r\n        {/* Location Selector */}\r\n        <FormControl fullWidth sx={{ mb: 3 }}>\r\n          <InputLabel>Location</InputLabel>\r\n          <Select\r\n            value={usingGPS ? 'GPS Location' : selectedCity}\r\n            label=\"Location\"\r\n            onChange={(e) => {\r\n              if (e.target.value !== 'GPS Location') {\r\n                handleCityChange(e.target.value);\r\n              }\r\n            }}\r\n          >\r\n            {usingGPS && (\r\n              <MenuItem value=\"GPS Location\" disabled>\r\n                📍 Using GPS Location ({currentZone})\r\n              </MenuItem>\r\n            )}\r\n            {Object.keys(malaysianZones).map(city => (\r\n              <MenuItem key={city} value={city}>\r\n                {city} ({malaysianZones[city]})\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n\r\n        {/* Next Prayer */}\r\n        {nextPrayer && (\r\n          <Box sx={{ \r\n            bgcolor: 'primary.main', \r\n            color: 'white', \r\n            p: 2, \r\n            borderRadius: 2, \r\n            mb: 3,\r\n            textAlign: 'center'\r\n          }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              🎯 Next Prayer\r\n            </Typography>\r\n            <Typography variant=\"h4\" fontWeight=\"bold\">\r\n              {nextPrayer.name}\r\n            </Typography>\r\n            <Typography variant=\"h6\">\r\n              {nextPrayer.time}\r\n              {nextPrayer.isTomorrow && ' (Tomorrow)'}\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n\r\n        {/* Prayer Times List */}\r\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n          {prayers.map((prayer) => {\r\n            const isCompleted = isPracticeCompleted(prayer.type);\r\n            const isNextPrayer = nextPrayer?.name === prayer.name;\r\n            \r\n            return (\r\n              <Box \r\n                key={prayer.name}\r\n                sx={{ \r\n                  display: 'flex', \r\n                  justifyContent: 'space-between', \r\n                  alignItems: 'center',\r\n                  p: 2,\r\n                  borderRadius: 2,\r\n                  bgcolor: isNextPrayer ? 'action.hover' : 'transparent',\r\n                  border: isNextPrayer ? '2px solid' : '1px solid',\r\n                  borderColor: isNextPrayer ? 'primary.main' : 'divider',\r\n                  opacity: isCompleted ? 0.8 : 1\r\n                }}\r\n              >\r\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n                  <Typography variant=\"h5\">{prayer.icon}</Typography>\r\n                  <Box>\r\n                    <Typography \r\n                      variant=\"h6\"\r\n                      sx={{ \r\n                        textDecoration: isCompleted ? 'line-through' : 'none',\r\n                        color: isCompleted ? 'text.secondary' : 'text.primary'\r\n                      }}\r\n                    >\r\n                      {prayer.name}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      {prayer.time || '--:--'}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n                \r\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                  {isNextPrayer && (\r\n                    <Chip \r\n                      label=\"Next\" \r\n                      color=\"primary\" \r\n                      size=\"small\"\r\n                    />\r\n                  )}\r\n                  \r\n                  <IconButton\r\n                    onClick={() => handlePracticeToggle(prayer.type)}\r\n                    color={isCompleted ? \"success\" : \"default\"}\r\n                    sx={{\r\n                      border: isCompleted ? '2px solid' : '1px solid',\r\n                      borderColor: isCompleted ? 'success.main' : 'grey.400'\r\n                    }}\r\n                  >\r\n                    {isCompleted ? <CheckCircle /> : <RadioButtonUnchecked />}\r\n                  </IconButton>\r\n                </Box>\r\n              </Box>\r\n            );\r\n          })}\r\n        </Box>\r\n\r\n        {/* Footer Info */}\r\n        <Box sx={{ mt: 2, textAlign: 'center' }}>\r\n          <Typography variant=\"caption\" color=\"text.secondary\">\r\n            Source: JAKIM e-solat.gov.my • Zone: {currentZone}\r\n          </Typography>\r\n          <br />\r\n          <Typography variant=\"caption\" color=\"text.secondary\">\r\n            {usingGPS ? '📍 Using your GPS location' : `📍 ${selectedCity}`}\r\n          </Typography>\r\n          <br />\r\n          <Typography variant=\"caption\" color=\"text.secondary\">\r\n            Tap circle to mark prayer as completed\r\n          </Typography>\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default PrayerTimes;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}