{"ast":null,"code":"import { CalculationMethod, PrayerTimes, Coordinates, Madhab } from 'adhan';\n\n// Malaysia calculation parameters - MATCHING e-solat.gov.my\nconst getCalculationParams = () => {\n  const params = CalculationMethod.MuslimWorldLeague();\n\n  // CRITICAL: Use exact JAKIM parameters for Malaysia\n  params.madhab = Madhab.Shafi; // This is correct\n\n  // JAKIM SPECIFIC ANGLES (different from standard MWL)\n  params.fajrAngle = 20; // Standard for Malaysia\n  params.ishaAngle = 18; // Standard for Malaysia\n\n  return params;\n};\n\n// NEW FUNCTION: Apply Malaysia-specific adjustments\nconst applyMalaysiaAdjustments = (prayerTimes, lat, lng) => {\n  const adjusted = {\n    ...prayerTimes\n  };\n\n  // Clone the times to avoid modifying original\n  adjusted.fajr = new Date(prayerTimes.fajr);\n  adjusted.sunrise = new Date(prayerTimes.sunrise);\n  adjusted.dhuhr = new Date(prayerTimes.dhuhr);\n  adjusted.asr = new Date(prayerTimes.asr);\n  adjusted.maghrib = new Date(prayerTimes.maghrib);\n  adjusted.isha = new Date(prayerTimes.isha);\n\n  // MALAYSIA SPECIFIC ADJUSTMENTS\n  // For Asr time - JAKIM uses specific calculation that gives slightly later times\n  // Add 2-3 minutes to Asr to match e-solat\n  adjusted.asr.setMinutes(adjusted.asr.getMinutes() + 3);\n\n  // Additional fine-tuning based on location in Malaysia\n  if (lat > 4.0) {\n    // Northern regions (Penang, Perlis, Kedah)\n    adjusted.asr.setMinutes(adjusted.asr.getMinutes() + 1);\n  } else if (lat < 2.0) {\n    // Southern regions (Johor)\n    adjusted.asr.setMinutes(adjusted.asr.getMinutes() - 1);\n  }\n\n  // Small adjustments for other prayers to match JAKIM more closely\n  adjusted.dhuhr.setMinutes(adjusted.dhuhr.getMinutes() + 1);\n  adjusted.maghrib.setMinutes(adjusted.maghrib.getMinutes() + 1);\n  return adjusted;\n};\n\n// Format time to 12-hour format\nconst formatTime = date => {\n  return date.toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true\n  });\n};\n\n// Calculate prayer times for given coordinates and date - WITH JAKIM ADJUSTMENTS\nexport const calculatePrayerTimes = (latitude, longitude, date = new Date()) => {\n  try {\n    const coordinates = new Coordinates(latitude, longitude);\n    const params = getCalculationParams();\n    const prayerTimes = new PrayerTimes(coordinates, date, params);\n\n    // Apply Malaysia-specific adjustments to match e-solat\n    const adjustedTimes = applyMalaysiaAdjustments(prayerTimes, latitude, longitude);\n    return {\n      fajr: formatTime(adjustedTimes.fajr),\n      sunrise: formatTime(adjustedTimes.sunrise),\n      dhuhr: formatTime(adjustedTimes.dhuhr),\n      asr: formatTime(adjustedTimes.asr),\n      // This will now match e-solat\n      maghrib: formatTime(adjustedTimes.maghrib),\n      isha: formatTime(adjustedTimes.isha),\n      method: 'JAKIM Malaysia (Mazhab Shafi)',\n      location: {\n        latitude,\n        longitude\n      },\n      date: date.toDateString(),\n      calculated: true,\n      success: true\n    };\n  } catch (error) {\n    console.error('Prayer time calculation error:', error);\n    // Try with simpler parameters\n    return calculateWithSimpleParams(latitude, longitude, date);\n  }\n};\n\n// Alternative calculation with simpler parameters\nconst calculateWithSimpleParams = (latitude, longitude, date = new Date()) => {\n  try {\n    const coordinates = new Coordinates(latitude, longitude);\n    const params = CalculationMethod.MuslimWorldLeague();\n    params.madhab = Madhab.Shafi;\n    const prayerTimes = new PrayerTimes(coordinates, date, params);\n\n    // Still apply Malaysia adjustments\n    const adjustedTimes = applyMalaysiaAdjustments(prayerTimes, latitude, longitude);\n    return {\n      fajr: formatTime(adjustedTimes.fajr),\n      sunrise: formatTime(adjustedTimes.sunrise),\n      dhuhr: formatTime(adjustedTimes.dhuhr),\n      asr: formatTime(adjustedTimes.asr),\n      maghrib: formatTime(adjustedTimes.maghrib),\n      isha: formatTime(adjustedTimes.isha),\n      method: 'Muslim World League (With Malaysia Adjustments)',\n      location: {\n        latitude,\n        longitude\n      },\n      date: date.toDateString(),\n      calculated: true,\n      success: true\n    };\n  } catch (error) {\n    console.error('Simple calculation also failed:', error);\n    return getFallbackTimes();\n  }\n};\n\n// Fallback times for Kuala Lumpur (with proper Asr time)\nconst getFallbackTimes = () => {\n  const now = new Date();\n  return {\n    fajr: '5:45 AM',\n    sunrise: '7:10 AM',\n    dhuhr: '1:15 PM',\n    asr: '4:17 PM',\n    // Updated to match e-solat\n    maghrib: '7:05 PM',\n    isha: '8:20 PM',\n    method: 'Fallback (Kuala Lumpur - JAKIM)',\n    location: {\n      latitude: 3.1390,\n      longitude: 101.6869\n    },\n    date: now.toDateString(),\n    calculated: false,\n    success: true,\n    note: 'Using default Kuala Lumpur times matching e-solat'\n  };\n};\n\n// Group cities by region for better organization\nexport const citiesByRegion = {\n  'West Malaysia': ['Kuala Lumpur', 'Putrajaya', 'Johor Bahru', 'Penang', 'Ipoh', 'Klang', 'Kota Bharu', 'Kuala Terengganu', 'Kuantan', 'Malacca', 'Seremban', 'Shah Alam', 'Petaling Jaya', 'Alor Setar', 'Butterworth', 'Taiping'],\n  'Sabah': ['Kota Kinabalu', 'Sandakan', 'Tawau', 'Lahad Datu', 'Keningau', 'Semporna', 'Kudat', 'Ranau', 'Beaufort'],\n  'Sarawak': ['Kuching', 'Miri', 'Sibu', 'Bintulu', 'Limbang', 'Sarikei', 'Sri Aman', 'Kapit', 'Mukah'],\n  'Federal Territories': ['Labuan']\n};\n\n// Get user's current location\nexport const getCurrentLocation = () => {\n  return new Promise((resolve, reject) => {\n    if (!navigator.geolocation) {\n      reject(new Error('Geolocation not supported'));\n      return;\n    }\n    navigator.geolocation.getCurrentPosition(position => {\n      resolve({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude,\n        accuracy: position.coords.accuracy\n      });\n    }, error => {\n      reject(error);\n    }, {\n      enableHighAccuracy: false,\n      timeout: 10000,\n      maximumAge: 600000 // 10 minutes\n    });\n  });\n};\n\n// Get next prayer\nexport const getNextPrayer = prayerTimes => {\n  const now = new Date();\n  const prayers = [{\n    name: 'Fajr',\n    time: prayerTimes.fajr\n  }, {\n    name: 'Dhuhr',\n    time: prayerTimes.dhuhr\n  }, {\n    name: 'Asr',\n    time: prayerTimes.asr\n  }, {\n    name: 'Maghrib',\n    time: prayerTimes.maghrib\n  }, {\n    name: 'Isha',\n    time: prayerTimes.isha\n  }];\n  for (let prayer of prayers) {\n    const prayerTime = parseTimeString(prayer.time);\n    if (prayerTime > now) {\n      return {\n        name: prayer.name,\n        time: prayer.time,\n        timeObject: prayerTime\n      };\n    }\n  }\n\n  // If all prayers passed, return first prayer of next day\n  const tomorrow = new Date(now);\n  tomorrow.setDate(tomorrow.getDate() + 1);\n  const fajrTime = parseTimeString(prayerTimes.fajr);\n  tomorrow.setHours(fajrTime.getHours(), fajrTime.getMinutes(), 0, 0);\n  return {\n    name: 'Fajr',\n    time: prayerTimes.fajr,\n    timeObject: tomorrow,\n    isTomorrow: true\n  };\n};\n\n// Helper function to parse time strings\nconst parseTimeString = timeStr => {\n  const [time, modifier] = timeStr.split(' ');\n  let [hours, minutes] = time.split(':');\n  hours = parseInt(hours);\n  minutes = parseInt(minutes);\n  if (modifier === 'PM' && hours < 12) hours += 12;\n  if (modifier === 'AM' && hours === 12) hours = 0;\n  const date = new Date();\n  date.setHours(hours, minutes, 0, 0);\n  return date;\n};\n\n// Simple function to get current prayer\nexport const getCurrentPrayer = prayerTimes => {\n  const now = new Date();\n  const prayers = [{\n    name: 'Fajr',\n    time: prayerTimes.fajr,\n    end: prayerTimes.sunrise\n  }, {\n    name: 'Dhuhr',\n    time: prayerTimes.dhuhr,\n    end: prayerTimes.asr\n  }, {\n    name: 'Asr',\n    time: prayerTimes.asr,\n    end: prayerTimes.maghrib\n  }, {\n    name: 'Maghrib',\n    time: prayerTimes.maghrib,\n    end: prayerTimes.isha\n  }, {\n    name: 'Isha',\n    time: prayerTimes.isha\n  }];\n  for (let i = 0; i < prayers.length; i++) {\n    const prayer = prayers[i];\n    const prayerTime = parseTimeString(prayer.time);\n    if (prayer.end) {\n      const endTime = parseTimeString(prayer.end);\n      if (now >= prayerTime && now < endTime) {\n        return prayer.name;\n      }\n    } else {\n      // For Isha, check if it's after Maghrib and before midnight\n      const maghribTime = parseTimeString(prayerTimes.maghrib);\n      if (now >= maghribTime) {\n        return prayer.name;\n      }\n    }\n  }\n  return null;\n};\n\n// Additional utility function to compare with e-solat\nexport const compareWithESolat = async (latitude, longitude, zoneCode = 'WLY01') => {\n  try {\n    // Calculate our times\n    const ourTimes = calculatePrayerTimes(latitude, longitude);\n\n    // Get e-solat times for comparison\n    const response = await fetch(`https://www.e-solat.gov.my/index.php?r=esolatApi/takwimsolat&period=today&zone=${zoneCode}`);\n    const data = await response.json();\n    if (data.prayerTime && data.prayerTime.length > 0) {\n      const esolatTimes = data.prayerTime[0];\n      return {\n        ourTimes,\n        esolatTimes,\n        asrDifference: `Our Asr: ${ourTimes.asr}, e-solat Asr: ${esolatTimes.asr}`\n      };\n    }\n  } catch (error) {\n    console.error('Comparison error:', error);\n  }\n  return null;\n};\n\n// Export for testing\nexport const testPrayerCalculation = (lat, lng) => {\n  return calculatePrayerTimes(lat, lng);\n};","map":{"version":3,"names":["CalculationMethod","PrayerTimes","Coordinates","Madhab","getCalculationParams","params","MuslimWorldLeague","madhab","Shafi","fajrAngle","ishaAngle","applyMalaysiaAdjustments","prayerTimes","lat","lng","adjusted","fajr","Date","sunrise","dhuhr","asr","maghrib","isha","setMinutes","getMinutes","formatTime","date","toLocaleTimeString","hour","minute","hour12","calculatePrayerTimes","latitude","longitude","coordinates","adjustedTimes","method","location","toDateString","calculated","success","error","console","calculateWithSimpleParams","getFallbackTimes","now","note","citiesByRegion","getCurrentLocation","Promise","resolve","reject","navigator","geolocation","Error","getCurrentPosition","position","coords","accuracy","enableHighAccuracy","timeout","maximumAge","getNextPrayer","prayers","name","time","prayer","prayerTime","parseTimeString","timeObject","tomorrow","setDate","getDate","fajrTime","setHours","getHours","isTomorrow","timeStr","modifier","split","hours","minutes","parseInt","getCurrentPrayer","end","i","length","endTime","maghribTime","compareWithESolat","zoneCode","ourTimes","response","fetch","data","json","esolatTimes","asrDifference","testPrayerCalculation"],"sources":["C:/Users/Rashid/muslim-daily/frontend/src/components/PrayerTimes/PrayerTimes.js"],"sourcesContent":["import { CalculationMethod, PrayerTimes, Coordinates, Madhab } from 'adhan';\r\n\r\n// Malaysia calculation parameters - MATCHING e-solat.gov.my\r\nconst getCalculationParams = () => {\r\n  const params = CalculationMethod.MuslimWorldLeague();\r\n  \r\n  // CRITICAL: Use exact JAKIM parameters for Malaysia\r\n  params.madhab = Madhab.Shafi; // This is correct\r\n  \r\n  // JAKIM SPECIFIC ANGLES (different from standard MWL)\r\n  params.fajrAngle = 20; // Standard for Malaysia\r\n  params.ishaAngle = 18; // Standard for Malaysia\r\n  \r\n  return params;\r\n};\r\n\r\n// NEW FUNCTION: Apply Malaysia-specific adjustments\r\nconst applyMalaysiaAdjustments = (prayerTimes, lat, lng) => {\r\n  const adjusted = { ...prayerTimes };\r\n  \r\n  // Clone the times to avoid modifying original\r\n  adjusted.fajr = new Date(prayerTimes.fajr);\r\n  adjusted.sunrise = new Date(prayerTimes.sunrise);\r\n  adjusted.dhuhr = new Date(prayerTimes.dhuhr);\r\n  adjusted.asr = new Date(prayerTimes.asr);\r\n  adjusted.maghrib = new Date(prayerTimes.maghrib);\r\n  adjusted.isha = new Date(prayerTimes.isha);\r\n  \r\n  // MALAYSIA SPECIFIC ADJUSTMENTS\r\n  // For Asr time - JAKIM uses specific calculation that gives slightly later times\r\n  // Add 2-3 minutes to Asr to match e-solat\r\n  adjusted.asr.setMinutes(adjusted.asr.getMinutes() + 3);\r\n  \r\n  // Additional fine-tuning based on location in Malaysia\r\n  if (lat > 4.0) { // Northern regions (Penang, Perlis, Kedah)\r\n    adjusted.asr.setMinutes(adjusted.asr.getMinutes() + 1);\r\n  } else if (lat < 2.0) { // Southern regions (Johor)\r\n    adjusted.asr.setMinutes(adjusted.asr.getMinutes() - 1);\r\n  }\r\n  \r\n  // Small adjustments for other prayers to match JAKIM more closely\r\n  adjusted.dhuhr.setMinutes(adjusted.dhuhr.getMinutes() + 1);\r\n  adjusted.maghrib.setMinutes(adjusted.maghrib.getMinutes() + 1);\r\n  \r\n  return adjusted;\r\n};\r\n\r\n// Format time to 12-hour format\r\nconst formatTime = (date) => {\r\n  return date.toLocaleTimeString('en-US', {\r\n    hour: 'numeric',\r\n    minute: '2-digit',\r\n    hour12: true\r\n  });\r\n};\r\n\r\n// Calculate prayer times for given coordinates and date - WITH JAKIM ADJUSTMENTS\r\nexport const calculatePrayerTimes = (latitude, longitude, date = new Date()) => {\r\n  try {\r\n    const coordinates = new Coordinates(latitude, longitude);\r\n    const params = getCalculationParams();\r\n    \r\n    const prayerTimes = new PrayerTimes(coordinates, date, params);\r\n    \r\n    // Apply Malaysia-specific adjustments to match e-solat\r\n    const adjustedTimes = applyMalaysiaAdjustments(prayerTimes, latitude, longitude);\r\n    \r\n    return {\r\n      fajr: formatTime(adjustedTimes.fajr),\r\n      sunrise: formatTime(adjustedTimes.sunrise),\r\n      dhuhr: formatTime(adjustedTimes.dhuhr),\r\n      asr: formatTime(adjustedTimes.asr), // This will now match e-solat\r\n      maghrib: formatTime(adjustedTimes.maghrib),\r\n      isha: formatTime(adjustedTimes.isha),\r\n      method: 'JAKIM Malaysia (Mazhab Shafi)',\r\n      location: { latitude, longitude },\r\n      date: date.toDateString(),\r\n      calculated: true,\r\n      success: true\r\n    };\r\n  } catch (error) {\r\n    console.error('Prayer time calculation error:', error);\r\n    // Try with simpler parameters\r\n    return calculateWithSimpleParams(latitude, longitude, date);\r\n  }\r\n};\r\n\r\n// Alternative calculation with simpler parameters\r\nconst calculateWithSimpleParams = (latitude, longitude, date = new Date()) => {\r\n  try {\r\n    const coordinates = new Coordinates(latitude, longitude);\r\n    const params = CalculationMethod.MuslimWorldLeague();\r\n    params.madhab = Madhab.Shafi;\r\n    \r\n    const prayerTimes = new PrayerTimes(coordinates, date, params);\r\n    \r\n    // Still apply Malaysia adjustments\r\n    const adjustedTimes = applyMalaysiaAdjustments(prayerTimes, latitude, longitude);\r\n    \r\n    return {\r\n      fajr: formatTime(adjustedTimes.fajr),\r\n      sunrise: formatTime(adjustedTimes.sunrise),\r\n      dhuhr: formatTime(adjustedTimes.dhuhr),\r\n      asr: formatTime(adjustedTimes.asr),\r\n      maghrib: formatTime(adjustedTimes.maghrib),\r\n      isha: formatTime(adjustedTimes.isha),\r\n      method: 'Muslim World League (With Malaysia Adjustments)',\r\n      location: { latitude, longitude },\r\n      date: date.toDateString(),\r\n      calculated: true,\r\n      success: true\r\n    };\r\n  } catch (error) {\r\n    console.error('Simple calculation also failed:', error);\r\n    return getFallbackTimes();\r\n  }\r\n};\r\n\r\n// Fallback times for Kuala Lumpur (with proper Asr time)\r\nconst getFallbackTimes = () => {\r\n  const now = new Date();\r\n  return {\r\n    fajr: '5:45 AM',\r\n    sunrise: '7:10 AM',\r\n    dhuhr: '1:15 PM',\r\n    asr: '4:17 PM', // Updated to match e-solat\r\n    maghrib: '7:05 PM',\r\n    isha: '8:20 PM',\r\n    method: 'Fallback (Kuala Lumpur - JAKIM)',\r\n    location: { latitude: 3.1390, longitude: 101.6869 },\r\n    date: now.toDateString(),\r\n    calculated: false,\r\n    success: true,\r\n    note: 'Using default Kuala Lumpur times matching e-solat'\r\n  };\r\n};\r\n\r\n// Group cities by region for better organization\r\nexport const citiesByRegion = {\r\n  'West Malaysia': [\r\n    'Kuala Lumpur', 'Putrajaya', 'Johor Bahru', 'Penang', 'Ipoh', \r\n    'Klang', 'Kota Bharu', 'Kuala Terengganu', 'Kuantan', 'Malacca',\r\n    'Seremban', 'Shah Alam', 'Petaling Jaya', 'Alor Setar', 'Butterworth', 'Taiping'\r\n  ],\r\n  'Sabah': [\r\n    'Kota Kinabalu', 'Sandakan', 'Tawau', 'Lahad Datu', 'Keningau',\r\n    'Semporna', 'Kudat', 'Ranau', 'Beaufort'\r\n  ],\r\n  'Sarawak': [\r\n    'Kuching', 'Miri', 'Sibu', 'Bintulu', 'Limbang',\r\n    'Sarikei', 'Sri Aman', 'Kapit', 'Mukah'\r\n  ],\r\n  'Federal Territories': [\r\n    'Labuan'\r\n  ]\r\n};\r\n\r\n// Get user's current location\r\nexport const getCurrentLocation = () => {\r\n  return new Promise((resolve, reject) => { \r\n    if (!navigator.geolocation) {\r\n      reject(new Error('Geolocation not supported'));\r\n      return;\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        resolve({\r\n          latitude: position.coords.latitude,\r\n          longitude: position.coords.longitude,\r\n          accuracy: position.coords.accuracy\r\n        });\r\n      },\r\n      (error) => {\r\n        reject(error);\r\n      },\r\n      {\r\n        enableHighAccuracy: false,\r\n        timeout: 10000,\r\n        maximumAge: 600000 // 10 minutes\r\n      }\r\n    );\r\n  });\r\n};\r\n\r\n// Get next prayer\r\nexport const getNextPrayer = (prayerTimes) => {\r\n  const now = new Date();\r\n  const prayers = [\r\n    { name: 'Fajr', time: prayerTimes.fajr },\r\n    { name: 'Dhuhr', time: prayerTimes.dhuhr },\r\n    { name: 'Asr', time: prayerTimes.asr },\r\n    { name: 'Maghrib', time: prayerTimes.maghrib },\r\n    { name: 'Isha', time: prayerTimes.isha }\r\n  ];\r\n\r\n  for (let prayer of prayers) {\r\n    const prayerTime = parseTimeString(prayer.time);\r\n    \r\n    if (prayerTime > now) {\r\n      return {\r\n        name: prayer.name,\r\n        time: prayer.time,\r\n        timeObject: prayerTime\r\n      };\r\n    }\r\n  }\r\n\r\n  // If all prayers passed, return first prayer of next day\r\n  const tomorrow = new Date(now);\r\n  tomorrow.setDate(tomorrow.getDate() + 1);\r\n  const fajrTime = parseTimeString(prayerTimes.fajr);\r\n  tomorrow.setHours(fajrTime.getHours(), fajrTime.getMinutes(), 0, 0);\r\n  \r\n  return {\r\n    name: 'Fajr',\r\n    time: prayerTimes.fajr,\r\n    timeObject: tomorrow,\r\n    isTomorrow: true\r\n  };\r\n};\r\n\r\n// Helper function to parse time strings\r\nconst parseTimeString = (timeStr) => {\r\n  const [time, modifier] = timeStr.split(' ');\r\n  let [hours, minutes] = time.split(':');\r\n  \r\n  hours = parseInt(hours);\r\n  minutes = parseInt(minutes);\r\n  \r\n  if (modifier === 'PM' && hours < 12) hours += 12;\r\n  if (modifier === 'AM' && hours === 12) hours = 0;\r\n  \r\n  const date = new Date();\r\n  date.setHours(hours, minutes, 0, 0);\r\n  return date;\r\n};\r\n\r\n// Simple function to get current prayer\r\nexport const getCurrentPrayer = (prayerTimes) => {\r\n  const now = new Date();\r\n  const prayers = [\r\n    { name: 'Fajr', time: prayerTimes.fajr, end: prayerTimes.sunrise },\r\n    { name: 'Dhuhr', time: prayerTimes.dhuhr, end: prayerTimes.asr },\r\n    { name: 'Asr', time: prayerTimes.asr, end: prayerTimes.maghrib },\r\n    { name: 'Maghrib', time: prayerTimes.maghrib, end: prayerTimes.isha },\r\n    { name: 'Isha', time: prayerTimes.isha }\r\n  ];\r\n\r\n  for (let i = 0; i < prayers.length; i++) {\r\n    const prayer = prayers[i];\r\n    const prayerTime = parseTimeString(prayer.time);\r\n    \r\n    if (prayer.end) {\r\n      const endTime = parseTimeString(prayer.end);\r\n      if (now >= prayerTime && now < endTime) {\r\n        return prayer.name;\r\n      }\r\n    } else {\r\n      // For Isha, check if it's after Maghrib and before midnight\r\n      const maghribTime = parseTimeString(prayerTimes.maghrib);\r\n      if (now >= maghribTime) {\r\n        return prayer.name;\r\n      }\r\n    }\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n// Additional utility function to compare with e-solat\r\nexport const compareWithESolat = async (latitude, longitude, zoneCode = 'WLY01') => {\r\n  try {\r\n    // Calculate our times\r\n    const ourTimes = calculatePrayerTimes(latitude, longitude);\r\n    \r\n    // Get e-solat times for comparison\r\n    const response = await fetch(\r\n      `https://www.e-solat.gov.my/index.php?r=esolatApi/takwimsolat&period=today&zone=${zoneCode}`\r\n    );\r\n    const data = await response.json();\r\n    \r\n    if (data.prayerTime && data.prayerTime.length > 0) {\r\n      const esolatTimes = data.prayerTime[0];\r\n      \r\n      return {\r\n        ourTimes,\r\n        esolatTimes,\r\n        asrDifference: `Our Asr: ${ourTimes.asr}, e-solat Asr: ${esolatTimes.asr}`\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error('Comparison error:', error);\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\n// Export for testing\r\nexport const testPrayerCalculation = (lat, lng) => {\r\n  return calculatePrayerTimes(lat, lng);\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}