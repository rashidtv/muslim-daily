{"ast":null,"code":"import { Madhab } from './Madhab';\nimport HighLatitudeRule from './HighLatitudeRule';\nimport { PolarCircleResolution } from './PolarCircleResolution';\nimport { Rounding } from './Rounding';\nimport { Shafaq } from './Shafaq';\nexport default class CalculationParameters {\n  // Madhab to determine how Asr is calculated.\n  madhab = Madhab.Shafi; // Rule to determine the earliest time for Fajr and latest time for Isha\n  // needed for high latitude locations where Fajr and Isha may not truly exist\n  // or may present a hardship unless bound to a reasonable time.\n\n  highLatitudeRule = HighLatitudeRule.MiddleOfTheNight; // Manual adjustments (in minutes) to be added to each prayer time.\n\n  adjustments = {\n    fajr: 0,\n    sunrise: 0,\n    dhuhr: 0,\n    asr: 0,\n    maghrib: 0,\n    isha: 0\n  }; // Adjustments set by a calculation method. This value should not be manually modified.\n\n  methodAdjustments = {\n    fajr: 0,\n    sunrise: 0,\n    dhuhr: 0,\n    asr: 0,\n    maghrib: 0,\n    isha: 0\n  }; // Rule to determine how to resolve prayer times inside the Polar Circle\n  // where daylight or night may persist for more than 24 hours depending\n  // on the season\n\n  polarCircleResolution = PolarCircleResolution.Unresolved; // How seconds are rounded when calculating prayer times\n\n  rounding = Rounding.Nearest; // Used by the MoonsightingCommittee method to determine how to calculate Isha\n\n  shafaq = Shafaq.General;\n  constructor(\n  // Name of the method, can be used to apply special behavior in calculations.\n  // This property should not be manually modified.\n  method,\n  // Angle of the sun below the horizon used for calculating Fajr.\n  fajrAngle = 0,\n  // Angle of the sun below the horizon used for calculating Isha.\n  ishaAngle = 0,\n  // Minutes after Maghrib to determine time for Isha\n  // if this value is greater than 0 then ishaAngle is not used.\n  ishaInterval = 0,\n  // Angle of the sun below the horizon used for calculating Maghrib.\n  // Only used by the Tehran method to account for lightness in the sky.\n  maghribAngle = 0) {\n    this.method = method;\n    this.fajrAngle = fajrAngle;\n    this.ishaAngle = ishaAngle;\n    this.ishaInterval = ishaInterval;\n    this.maghribAngle = maghribAngle;\n    if (this.method === null) {\n      // we don't want a breaking change\n      this.method = 'Other';\n    }\n  }\n  nightPortions() {\n    switch (this.highLatitudeRule) {\n      case HighLatitudeRule.MiddleOfTheNight:\n        return {\n          fajr: 1 / 2,\n          isha: 1 / 2\n        };\n      case HighLatitudeRule.SeventhOfTheNight:\n        return {\n          fajr: 1 / 7,\n          isha: 1 / 7\n        };\n      case HighLatitudeRule.TwilightAngle:\n        return {\n          fajr: this.fajrAngle / 60,\n          isha: this.ishaAngle / 60\n        };\n      default:\n        throw `Invalid high latitude rule found when attempting to compute night portions: ${this.highLatitudeRule}`;\n    }\n  }\n}","map":{"version":3,"names":["Madhab","HighLatitudeRule","PolarCircleResolution","Rounding","Shafaq","CalculationParameters","madhab","Shafi","highLatitudeRule","MiddleOfTheNight","adjustments","fajr","sunrise","dhuhr","asr","maghrib","isha","methodAdjustments","polarCircleResolution","Unresolved","rounding","Nearest","shafaq","General","constructor","method","fajrAngle","ishaAngle","ishaInterval","maghribAngle","nightPortions","SeventhOfTheNight","TwilightAngle"],"sources":["C:\\Users\\Rashid\\muslim-daily\\frontend\\node_modules\\adhan\\src\\CalculationParameters.ts"],"sourcesContent":["import type CalculationMethod from './CalculationMethod';\nimport { Madhab } from './Madhab';\nimport HighLatitudeRule from './HighLatitudeRule';\nimport { PolarCircleResolution } from './PolarCircleResolution';\nimport { Rounding } from './Rounding';\nimport { Shafaq } from './Shafaq';\nimport { ValueOf } from './TypeUtils';\n\nexport default class CalculationParameters {\n  // Madhab to determine how Asr is calculated.\n  madhab: ValueOf<typeof Madhab> = Madhab.Shafi;\n\n  // Rule to determine the earliest time for Fajr and latest time for Isha\n  // needed for high latitude locations where Fajr and Isha may not truly exist\n  // or may present a hardship unless bound to a reasonable time.\n  highLatitudeRule: ValueOf<typeof HighLatitudeRule> =\n    HighLatitudeRule.MiddleOfTheNight;\n\n  // Manual adjustments (in minutes) to be added to each prayer time.\n  adjustments = {\n    fajr: 0,\n    sunrise: 0,\n    dhuhr: 0,\n    asr: 0,\n    maghrib: 0,\n    isha: 0,\n  };\n\n  // Adjustments set by a calculation method. This value should not be manually modified.\n  methodAdjustments = {\n    fajr: 0,\n    sunrise: 0,\n    dhuhr: 0,\n    asr: 0,\n    maghrib: 0,\n    isha: 0,\n  };\n\n  // Rule to determine how to resolve prayer times inside the Polar Circle\n  // where daylight or night may persist for more than 24 hours depending\n  // on the season\n  polarCircleResolution: ValueOf<typeof PolarCircleResolution> =\n    PolarCircleResolution.Unresolved;\n\n  // How seconds are rounded when calculating prayer times\n  rounding: ValueOf<typeof Rounding> = Rounding.Nearest;\n\n  // Used by the MoonsightingCommittee method to determine how to calculate Isha\n  shafaq: ValueOf<typeof Shafaq> = Shafaq.General;\n\n  constructor(\n    // Name of the method, can be used to apply special behavior in calculations.\n    // This property should not be manually modified.\n    public method: null | keyof typeof CalculationMethod,\n    // Angle of the sun below the horizon used for calculating Fajr.\n    public fajrAngle = 0,\n    // Angle of the sun below the horizon used for calculating Isha.\n    public ishaAngle = 0,\n    // Minutes after Maghrib to determine time for Isha\n    // if this value is greater than 0 then ishaAngle is not used.\n    public ishaInterval = 0,\n    // Angle of the sun below the horizon used for calculating Maghrib.\n    // Only used by the Tehran method to account for lightness in the sky.\n    public maghribAngle = 0,\n  ) {\n    if (this.method === null) {\n      // we don't want a breaking change\n      this.method = 'Other';\n    }\n  }\n\n  nightPortions() {\n    switch (this.highLatitudeRule) {\n      case HighLatitudeRule.MiddleOfTheNight:\n        return { fajr: 1 / 2, isha: 1 / 2 };\n      case HighLatitudeRule.SeventhOfTheNight:\n        return { fajr: 1 / 7, isha: 1 / 7 };\n      case HighLatitudeRule.TwilightAngle:\n        return { fajr: this.fajrAngle / 60, isha: this.ishaAngle / 60 };\n      default:\n        throw `Invalid high latitude rule found when attempting to compute night portions: ${this.highLatitudeRule}`;\n    }\n  }\n}\n"],"mappings":"AACA,SAASA,MAAT,QAAuB,UAAvB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,MAAT,QAAuB,UAAvB;AAGA,eAAe,MAAMC,qBAAN,CAA4B;EACzC;EACAC,MAAM,GAA2BN,MAAM,CAACO,KAAlC,CAFmC,CAIzC;EACA;EACA;;EACAC,gBAAgB,GACdP,gBAAgB,CAACQ,gBADH,CAPyB,CAUzC;;EACAC,WAAW,GAAG;IACZC,IAAI,EAAE,CADM;IAEZC,OAAO,EAAE,CAFG;IAGZC,KAAK,EAAE,CAHK;IAIZC,GAAG,EAAE,CAJO;IAKZC,OAAO,EAAE,CALG;IAMZC,IAAI,EAAE;EANM,CAAH,CAX8B,CAoBzC;;EACAC,iBAAiB,GAAG;IAClBN,IAAI,EAAE,CADY;IAElBC,OAAO,EAAE,CAFS;IAGlBC,KAAK,EAAE,CAHW;IAIlBC,GAAG,EAAE,CAJa;IAKlBC,OAAO,EAAE,CALS;IAMlBC,IAAI,EAAE;EANY,CAAH,CArBwB,CA8BzC;EACA;EACA;;EACAE,qBAAqB,GACnBhB,qBAAqB,CAACiB,UADH,CAjCoB,CAoCzC;;EACAC,QAAQ,GAA6BjB,QAAQ,CAACkB,OAAtC,CArCiC,CAuCzC;;EACAC,MAAM,GAA2BlB,MAAM,CAACmB,OAAlC;EAENC,WAAWA;EACT;EACA;EACOC,MAHE;EAIT;EACOC,SAAS,GAAG,CALV;EAMT;EACOC,SAAS,GAAG,CAPV;EAQT;EACA;EACOC,YAAY,GAAG,CAVb;EAWT;EACA;EACOC,YAAY,GAAG,CAbb,EAcT;IAAA,KAXOJ,MAWP,GAXOA,MAWP;IAAA,KATOC,SASP,GATOA,SASP;IAAA,KAPOC,SAOP,GAPOA,SAOP;IAAA,KAJOC,YAIP,GAJOA,YAIP;IAAA,KADOC,YACP,GADOA,YACP;IACA,IAAI,KAAKJ,MAAL,KAAgB,IAApB,EAA0B;MACxB;MACA,KAAKA,MAAL,GAAc,OAAd;IACD;EACF;EAEDK,aAAaA,CAAA,EAAG;IACd,QAAQ,KAAKtB,gBAAb;MACE,KAAKP,gBAAgB,CAACQ,gBAAtB;QACE,OAAO;UAAEE,IAAI,EAAE,IAAI,CAAZ;UAAeK,IAAI,EAAE,IAAI;QAAzB,CAAP;MACF,KAAKf,gBAAgB,CAAC8B,iBAAtB;QACE,OAAO;UAAEpB,IAAI,EAAE,IAAI,CAAZ;UAAeK,IAAI,EAAE,IAAI;QAAzB,CAAP;MACF,KAAKf,gBAAgB,CAAC+B,aAAtB;QACE,OAAO;UAAErB,IAAI,EAAE,KAAKe,SAAL,GAAiB,EAAzB;UAA6BV,IAAI,EAAE,KAAKW,SAAL,GAAiB;QAApD,CAAP;MACF;QACE,MAAO,+EAA8E,KAAKnB,gBAAiB,EAA3G;IARJ;EAUD;AA1EwC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}