{"ast":null,"code":"import Astronomical from './Astronomical';\nimport { Rounding } from './Rounding';\nexport function dateByAddingDays(date, days) {\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const day = date.getDate() + days;\n  const hours = date.getHours();\n  const minutes = date.getMinutes();\n  const seconds = date.getSeconds();\n  return new Date(year, month, day, hours, minutes, seconds);\n}\nexport function dateByAddingMinutes(date, minutes) {\n  return dateByAddingSeconds(date, minutes * 60);\n}\nexport function dateByAddingSeconds(date, seconds) {\n  return new Date(date.getTime() + seconds * 1000);\n}\nexport function roundedMinute(date, rounding = Rounding.Nearest) {\n  const seconds = date.getUTCSeconds();\n  let offset = seconds >= 30 ? 60 - seconds : -1 * seconds;\n  if (rounding === Rounding.Up) {\n    offset = 60 - seconds;\n  } else if (rounding === Rounding.None) {\n    offset = 0;\n  }\n  return dateByAddingSeconds(date, offset);\n}\nexport function dayOfYear(date) {\n  let returnedDayOfYear = 0;\n  const feb = Astronomical.isLeapYear(date.getFullYear()) ? 29 : 28;\n  const months = [31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  for (let i = 0; i < date.getMonth(); i++) {\n    returnedDayOfYear += months[i];\n  }\n  returnedDayOfYear += date.getDate();\n  return returnedDayOfYear;\n}\nexport function isValidDate(date) {\n  return date instanceof Date && !isNaN(date.valueOf());\n}","map":{"version":3,"names":["Astronomical","Rounding","dateByAddingDays","date","days","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","Date","dateByAddingMinutes","dateByAddingSeconds","getTime","roundedMinute","rounding","Nearest","getUTCSeconds","offset","Up","None","dayOfYear","returnedDayOfYear","feb","isLeapYear","months","i","isValidDate","isNaN","valueOf"],"sources":["C:\\Users\\Rashid\\muslim-daily\\frontend\\node_modules\\adhan\\src\\DateUtils.ts"],"sourcesContent":["import Astronomical from './Astronomical';\nimport { Rounding } from './Rounding';\nimport { ValueOf } from './TypeUtils';\n\nexport function dateByAddingDays(date: Date, days: number) {\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const day = date.getDate() + days;\n  const hours = date.getHours();\n  const minutes = date.getMinutes();\n  const seconds = date.getSeconds();\n  return new Date(year, month, day, hours, minutes, seconds);\n}\n\nexport function dateByAddingMinutes(date: Date, minutes: number) {\n  return dateByAddingSeconds(date, minutes * 60);\n}\n\nexport function dateByAddingSeconds(date: Date, seconds: number) {\n  return new Date(date.getTime() + seconds * 1000);\n}\n\nexport function roundedMinute(\n  date: Date,\n  rounding: ValueOf<typeof Rounding> = Rounding.Nearest,\n) {\n  const seconds = date.getUTCSeconds();\n  let offset = seconds >= 30 ? 60 - seconds : -1 * seconds;\n  if (rounding === Rounding.Up) {\n    offset = 60 - seconds;\n  } else if (rounding === Rounding.None) {\n    offset = 0;\n  }\n\n  return dateByAddingSeconds(date, offset);\n}\n\nexport function dayOfYear(date: Date) {\n  let returnedDayOfYear = 0;\n  const feb = Astronomical.isLeapYear(date.getFullYear()) ? 29 : 28;\n  const months = [31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  for (let i = 0; i < date.getMonth(); i++) {\n    returnedDayOfYear += months[i];\n  }\n\n  returnedDayOfYear += date.getDate();\n\n  return returnedDayOfYear;\n}\n\nexport function isValidDate(date: Date) {\n  return date instanceof Date && !isNaN(date.valueOf());\n}\n"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,SAASC,QAAT,QAAyB,YAAzB;AAGA,OAAO,SAASC,gBAATA,CAA0BC,IAA1B,EAAsCC,IAAtC,EAAoD;EACzD,MAAMC,IAAI,GAAGF,IAAI,CAACG,WAAL,EAAb;EACA,MAAMC,KAAK,GAAGJ,IAAI,CAACK,QAAL,EAAd;EACA,MAAMC,GAAG,GAAGN,IAAI,CAACO,OAAL,KAAiBN,IAA7B;EACA,MAAMO,KAAK,GAAGR,IAAI,CAACS,QAAL,EAAd;EACA,MAAMC,OAAO,GAAGV,IAAI,CAACW,UAAL,EAAhB;EACA,MAAMC,OAAO,GAAGZ,IAAI,CAACa,UAAL,EAAhB;EACA,OAAO,IAAIC,IAAJ,CAASZ,IAAT,EAAeE,KAAf,EAAsBE,GAAtB,EAA2BE,KAA3B,EAAkCE,OAAlC,EAA2CE,OAA3C,CAAP;AACD;AAED,OAAO,SAASG,mBAATA,CAA6Bf,IAA7B,EAAyCU,OAAzC,EAA0D;EAC/D,OAAOM,mBAAmB,CAAChB,IAAD,EAAOU,OAAO,GAAG,EAAjB,CAA1B;AACD;AAED,OAAO,SAASM,mBAATA,CAA6BhB,IAA7B,EAAyCY,OAAzC,EAA0D;EAC/D,OAAO,IAAIE,IAAJ,CAASd,IAAI,CAACiB,OAAL,KAAiBL,OAAO,GAAG,IAApC,CAAP;AACD;AAED,OAAO,SAASM,aAATA,CACLlB,IADK,EAELmB,QAAkC,GAAGrB,QAAQ,CAACsB,OAFzC,EAGL;EACA,MAAMR,OAAO,GAAGZ,IAAI,CAACqB,aAAL,EAAhB;EACA,IAAIC,MAAM,GAAGV,OAAO,IAAI,EAAX,GAAgB,KAAKA,OAArB,GAA+B,CAAC,CAAD,GAAKA,OAAjD;EACA,IAAIO,QAAQ,KAAKrB,QAAQ,CAACyB,EAA1B,EAA8B;IAC5BD,MAAM,GAAG,KAAKV,OAAd;EACD,CAFD,MAEO,IAAIO,QAAQ,KAAKrB,QAAQ,CAAC0B,IAA1B,EAAgC;IACrCF,MAAM,GAAG,CAAT;EACD;EAED,OAAON,mBAAmB,CAAChB,IAAD,EAAOsB,MAAP,CAA1B;AACD;AAED,OAAO,SAASG,SAATA,CAAmBzB,IAAnB,EAA+B;EACpC,IAAI0B,iBAAiB,GAAG,CAAxB;EACA,MAAMC,GAAG,GAAG9B,YAAY,CAAC+B,UAAb,CAAwB5B,IAAI,CAACG,WAAL,EAAxB,IAA8C,EAA9C,GAAmD,EAA/D;EACA,MAAM0B,MAAM,GAAG,CAAC,EAAD,EAAKF,GAAL,EAAU,EAAV,EAAc,EAAd,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,EAAkC,EAAlC,EAAsC,EAAtC,EAA0C,EAA1C,EAA8C,EAA9C,CAAf;EACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG9B,IAAI,CAACK,QAAL,EAApB,EAAqCyB,CAAC,EAAtC,EAA0C;IACxCJ,iBAAiB,IAAIG,MAAM,CAACC,CAAD,CAA3B;EACD;EAEDJ,iBAAiB,IAAI1B,IAAI,CAACO,OAAL,EAArB;EAEA,OAAOmB,iBAAP;AACD;AAED,OAAO,SAASK,WAATA,CAAqB/B,IAArB,EAAiC;EACtC,OAAOA,IAAI,YAAYc,IAAhB,IAAwB,CAACkB,KAAK,CAAChC,IAAI,CAACiC,OAAL,EAAD,CAArC;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}