{"ast":null,"code":"import Astronomical from './Astronomical';\nimport { degreesToRadians, radiansToDegrees } from './MathUtils';\nimport SolarCoordinates from './SolarCoordinates';\nexport default class SolarTime {\n  constructor(date, coordinates) {\n    const julianDay = Astronomical.julianDay(date.getFullYear(), date.getMonth() + 1, date.getDate(), 0);\n    this.observer = coordinates;\n    this.solar = new SolarCoordinates(julianDay);\n    this.prevSolar = new SolarCoordinates(julianDay - 1);\n    this.nextSolar = new SolarCoordinates(julianDay + 1);\n    const m0 = Astronomical.approximateTransit(coordinates.longitude, this.solar.apparentSiderealTime, this.solar.rightAscension);\n    const solarAltitude = -50.0 / 60.0;\n    this.approxTransit = m0;\n    this.transit = Astronomical.correctedTransit(m0, coordinates.longitude, this.solar.apparentSiderealTime, this.solar.rightAscension, this.prevSolar.rightAscension, this.nextSolar.rightAscension);\n    this.sunrise = Astronomical.correctedHourAngle(m0, solarAltitude, coordinates, false, this.solar.apparentSiderealTime, this.solar.rightAscension, this.prevSolar.rightAscension, this.nextSolar.rightAscension, this.solar.declination, this.prevSolar.declination, this.nextSolar.declination);\n    this.sunset = Astronomical.correctedHourAngle(m0, solarAltitude, coordinates, true, this.solar.apparentSiderealTime, this.solar.rightAscension, this.prevSolar.rightAscension, this.nextSolar.rightAscension, this.solar.declination, this.prevSolar.declination, this.nextSolar.declination);\n  }\n  hourAngle(angle, afterTransit) {\n    return Astronomical.correctedHourAngle(this.approxTransit, angle, this.observer, afterTransit, this.solar.apparentSiderealTime, this.solar.rightAscension, this.prevSolar.rightAscension, this.nextSolar.rightAscension, this.solar.declination, this.prevSolar.declination, this.nextSolar.declination);\n  }\n  afternoon(shadowLength) {\n    // TODO source shadow angle calculation\n    const tangent = Math.abs(this.observer.latitude - this.solar.declination);\n    const inverse = shadowLength + Math.tan(degreesToRadians(tangent));\n    const angle = radiansToDegrees(Math.atan(1.0 / inverse));\n    return this.hourAngle(angle, true);\n  }\n}","map":{"version":3,"names":["Astronomical","degreesToRadians","radiansToDegrees","SolarCoordinates","SolarTime","constructor","date","coordinates","julianDay","getFullYear","getMonth","getDate","observer","solar","prevSolar","nextSolar","m0","approximateTransit","longitude","apparentSiderealTime","rightAscension","solarAltitude","approxTransit","transit","correctedTransit","sunrise","correctedHourAngle","declination","sunset","hourAngle","angle","afterTransit","afternoon","shadowLength","tangent","Math","abs","latitude","inverse","tan","atan"],"sources":["C:\\Users\\Rashid\\muslim-daily\\frontend\\node_modules\\adhan\\src\\SolarTime.ts"],"sourcesContent":["import Astronomical from './Astronomical';\nimport type Coordinates from './Coordinates';\nimport { degreesToRadians, radiansToDegrees } from './MathUtils';\nimport SolarCoordinates from './SolarCoordinates';\n\nexport default class SolarTime {\n  observer: Coordinates;\n  solar: SolarCoordinates;\n  prevSolar: SolarCoordinates;\n  nextSolar: SolarCoordinates;\n  approxTransit: number;\n  transit: number;\n  sunrise: number;\n  sunset: number;\n\n  constructor(date: Date, coordinates: Coordinates) {\n    const julianDay = Astronomical.julianDay(\n      date.getFullYear(),\n      date.getMonth() + 1,\n      date.getDate(),\n      0,\n    );\n\n    this.observer = coordinates;\n    this.solar = new SolarCoordinates(julianDay);\n\n    this.prevSolar = new SolarCoordinates(julianDay - 1);\n    this.nextSolar = new SolarCoordinates(julianDay + 1);\n\n    const m0 = Astronomical.approximateTransit(\n      coordinates.longitude,\n      this.solar.apparentSiderealTime,\n      this.solar.rightAscension,\n    );\n    const solarAltitude = -50.0 / 60.0;\n\n    this.approxTransit = m0;\n\n    this.transit = Astronomical.correctedTransit(\n      m0,\n      coordinates.longitude,\n      this.solar.apparentSiderealTime,\n      this.solar.rightAscension,\n      this.prevSolar.rightAscension,\n      this.nextSolar.rightAscension,\n    );\n\n    this.sunrise = Astronomical.correctedHourAngle(\n      m0,\n      solarAltitude,\n      coordinates,\n      false,\n      this.solar.apparentSiderealTime,\n      this.solar.rightAscension,\n      this.prevSolar.rightAscension,\n      this.nextSolar.rightAscension,\n      this.solar.declination,\n      this.prevSolar.declination,\n      this.nextSolar.declination,\n    );\n\n    this.sunset = Astronomical.correctedHourAngle(\n      m0,\n      solarAltitude,\n      coordinates,\n      true,\n      this.solar.apparentSiderealTime,\n      this.solar.rightAscension,\n      this.prevSolar.rightAscension,\n      this.nextSolar.rightAscension,\n      this.solar.declination,\n      this.prevSolar.declination,\n      this.nextSolar.declination,\n    );\n  }\n\n  hourAngle(angle: number, afterTransit: boolean) {\n    return Astronomical.correctedHourAngle(\n      this.approxTransit,\n      angle,\n      this.observer,\n      afterTransit,\n      this.solar.apparentSiderealTime,\n      this.solar.rightAscension,\n      this.prevSolar.rightAscension,\n      this.nextSolar.rightAscension,\n      this.solar.declination,\n      this.prevSolar.declination,\n      this.nextSolar.declination,\n    );\n  }\n\n  afternoon(shadowLength: number) {\n    // TODO source shadow angle calculation\n    const tangent = Math.abs(this.observer.latitude - this.solar.declination);\n    const inverse = shadowLength + Math.tan(degreesToRadians(tangent));\n    const angle = radiansToDegrees(Math.atan(1.0 / inverse));\n    return this.hourAngle(angle, true);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}