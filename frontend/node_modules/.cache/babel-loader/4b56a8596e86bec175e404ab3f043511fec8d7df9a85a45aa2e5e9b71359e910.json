{"ast":null,"code":"import SolarTime from './SolarTime';\nimport TimeComponents from './TimeComponents';\nimport Prayer from './Prayer';\nimport Astronomical from './Astronomical';\nimport { dateByAddingDays, dateByAddingMinutes, dateByAddingSeconds, dayOfYear, isValidDate, roundedMinute } from './DateUtils';\nimport { shadowLength } from './Madhab';\nimport { PolarCircleResolution, polarCircleResolvedValues } from './PolarCircleResolution';\nexport default class PrayerTimes {\n  // eslint-disable-next-line complexity\n  constructor(coordinates, date, calculationParameters) {\n    this.coordinates = coordinates;\n    this.date = date;\n    this.calculationParameters = calculationParameters;\n    let solarTime = new SolarTime(date, coordinates);\n    let fajrTime;\n    let sunriseTime;\n    let dhuhrTime;\n    let asrTime;\n    let sunsetTime;\n    let maghribTime;\n    let ishaTime;\n    let nightFraction;\n    dhuhrTime = new TimeComponents(solarTime.transit).utcDate(date.getFullYear(), date.getMonth(), date.getDate());\n    sunriseTime = new TimeComponents(solarTime.sunrise).utcDate(date.getFullYear(), date.getMonth(), date.getDate());\n    sunsetTime = new TimeComponents(solarTime.sunset).utcDate(date.getFullYear(), date.getMonth(), date.getDate());\n    const tomorrow = dateByAddingDays(date, 1);\n    let tomorrowSolarTime = new SolarTime(tomorrow, coordinates);\n    const polarCircleResolver = calculationParameters.polarCircleResolution;\n    if ((!isValidDate(sunriseTime) || !isValidDate(sunsetTime) || isNaN(tomorrowSolarTime.sunrise)) && polarCircleResolver !== PolarCircleResolution.Unresolved) {\n      const resolved = polarCircleResolvedValues(polarCircleResolver, date, coordinates);\n      solarTime = resolved.solarTime;\n      tomorrowSolarTime = resolved.tomorrowSolarTime;\n      const dateComponents = [date.getFullYear(), date.getMonth(), date.getDate()];\n      dhuhrTime = new TimeComponents(solarTime.transit).utcDate(...dateComponents);\n      sunriseTime = new TimeComponents(solarTime.sunrise).utcDate(...dateComponents);\n      sunsetTime = new TimeComponents(solarTime.sunset).utcDate(...dateComponents);\n    } // eslint-disable-next-line prefer-const\n\n    asrTime = new TimeComponents(solarTime.afternoon(shadowLength(calculationParameters.madhab))).utcDate(date.getFullYear(), date.getMonth(), date.getDate());\n    const tomorrowSunrise = new TimeComponents(tomorrowSolarTime.sunrise).utcDate(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate());\n    const night = (Number(tomorrowSunrise) - Number(sunsetTime)) / 1000;\n    fajrTime = new TimeComponents(solarTime.hourAngle(-1 * calculationParameters.fajrAngle, false)).utcDate(date.getFullYear(), date.getMonth(), date.getDate()); // special case for moonsighting committee above latitude 55\n\n    if (calculationParameters.method === 'MoonsightingCommittee' && coordinates.latitude >= 55) {\n      nightFraction = night / 7;\n      fajrTime = dateByAddingSeconds(sunriseTime, -nightFraction);\n    }\n    const safeFajr = function () {\n      if (calculationParameters.method === 'MoonsightingCommittee') {\n        return Astronomical.seasonAdjustedMorningTwilight(coordinates.latitude, dayOfYear(date), date.getFullYear(), sunriseTime);\n      } else {\n        const portion = calculationParameters.nightPortions().fajr;\n        nightFraction = portion * night;\n        return dateByAddingSeconds(sunriseTime, -nightFraction);\n      }\n    }();\n    if (isNaN(fajrTime.getTime()) || safeFajr > fajrTime) {\n      fajrTime = safeFajr;\n    }\n    if (calculationParameters.ishaInterval > 0) {\n      ishaTime = dateByAddingMinutes(sunsetTime, calculationParameters.ishaInterval);\n    } else {\n      ishaTime = new TimeComponents(solarTime.hourAngle(-1 * calculationParameters.ishaAngle, true)).utcDate(date.getFullYear(), date.getMonth(), date.getDate()); // special case for moonsighting committee above latitude 55\n\n      if (calculationParameters.method === 'MoonsightingCommittee' && coordinates.latitude >= 55) {\n        nightFraction = night / 7;\n        ishaTime = dateByAddingSeconds(sunsetTime, nightFraction);\n      }\n      const safeIsha = function () {\n        if (calculationParameters.method === 'MoonsightingCommittee') {\n          return Astronomical.seasonAdjustedEveningTwilight(coordinates.latitude, dayOfYear(date), date.getFullYear(), sunsetTime, calculationParameters.shafaq);\n        } else {\n          const portion = calculationParameters.nightPortions().isha;\n          nightFraction = portion * night;\n          return dateByAddingSeconds(sunsetTime, nightFraction);\n        }\n      }();\n      if (isNaN(ishaTime.getTime()) || safeIsha < ishaTime) {\n        ishaTime = safeIsha;\n      }\n    }\n    maghribTime = sunsetTime;\n    if (calculationParameters.maghribAngle) {\n      const angleBasedMaghrib = new TimeComponents(solarTime.hourAngle(-1 * calculationParameters.maghribAngle, true)).utcDate(date.getFullYear(), date.getMonth(), date.getDate());\n      if (sunsetTime < angleBasedMaghrib && ishaTime > angleBasedMaghrib) {\n        maghribTime = angleBasedMaghrib;\n      }\n    }\n    const fajrAdjustment = (calculationParameters.adjustments.fajr || 0) + (calculationParameters.methodAdjustments.fajr || 0);\n    const sunriseAdjustment = (calculationParameters.adjustments.sunrise || 0) + (calculationParameters.methodAdjustments.sunrise || 0);\n    const dhuhrAdjustment = (calculationParameters.adjustments.dhuhr || 0) + (calculationParameters.methodAdjustments.dhuhr || 0);\n    const asrAdjustment = (calculationParameters.adjustments.asr || 0) + (calculationParameters.methodAdjustments.asr || 0);\n    const maghribAdjustment = (calculationParameters.adjustments.maghrib || 0) + (calculationParameters.methodAdjustments.maghrib || 0);\n    const ishaAdjustment = (calculationParameters.adjustments.isha || 0) + (calculationParameters.methodAdjustments.isha || 0);\n    this.fajr = roundedMinute(dateByAddingMinutes(fajrTime, fajrAdjustment), calculationParameters.rounding);\n    this.sunrise = roundedMinute(dateByAddingMinutes(sunriseTime, sunriseAdjustment), calculationParameters.rounding);\n    this.dhuhr = roundedMinute(dateByAddingMinutes(dhuhrTime, dhuhrAdjustment), calculationParameters.rounding);\n    this.asr = roundedMinute(dateByAddingMinutes(asrTime, asrAdjustment), calculationParameters.rounding);\n    this.sunset = roundedMinute(sunsetTime, calculationParameters.rounding);\n    this.maghrib = roundedMinute(dateByAddingMinutes(maghribTime, maghribAdjustment), calculationParameters.rounding);\n    this.isha = roundedMinute(dateByAddingMinutes(ishaTime, ishaAdjustment), calculationParameters.rounding);\n  }\n  timeForPrayer(prayer) {\n    if (prayer === Prayer.Fajr) {\n      return this.fajr;\n    } else if (prayer === Prayer.Sunrise) {\n      return this.sunrise;\n    } else if (prayer === Prayer.Dhuhr) {\n      return this.dhuhr;\n    } else if (prayer === Prayer.Asr) {\n      return this.asr;\n    } else if (prayer === Prayer.Maghrib) {\n      return this.maghrib;\n    } else if (prayer === Prayer.Isha) {\n      return this.isha;\n    } else {\n      return null;\n    }\n  }\n  currentPrayer(date = new Date()) {\n    if (date >= this.isha) {\n      return Prayer.Isha;\n    } else if (date >= this.maghrib) {\n      return Prayer.Maghrib;\n    } else if (date >= this.asr) {\n      return Prayer.Asr;\n    } else if (date >= this.dhuhr) {\n      return Prayer.Dhuhr;\n    } else if (date >= this.sunrise) {\n      return Prayer.Sunrise;\n    } else if (date >= this.fajr) {\n      return Prayer.Fajr;\n    } else {\n      return Prayer.None;\n    }\n  }\n  nextPrayer(date = new Date()) {\n    if (date >= this.isha) {\n      return Prayer.None;\n    } else if (date >= this.maghrib) {\n      return Prayer.Isha;\n    } else if (date >= this.asr) {\n      return Prayer.Maghrib;\n    } else if (date >= this.dhuhr) {\n      return Prayer.Asr;\n    } else if (date >= this.sunrise) {\n      return Prayer.Dhuhr;\n    } else if (date >= this.fajr) {\n      return Prayer.Sunrise;\n    } else {\n      return Prayer.Fajr;\n    }\n  }\n}","map":{"version":3,"names":["SolarTime","TimeComponents","Prayer","Astronomical","dateByAddingDays","dateByAddingMinutes","dateByAddingSeconds","dayOfYear","isValidDate","roundedMinute","shadowLength","PolarCircleResolution","polarCircleResolvedValues","PrayerTimes","constructor","coordinates","date","calculationParameters","solarTime","fajrTime","sunriseTime","dhuhrTime","asrTime","sunsetTime","maghribTime","ishaTime","nightFraction","transit","utcDate","getFullYear","getMonth","getDate","sunrise","sunset","tomorrow","tomorrowSolarTime","polarCircleResolver","polarCircleResolution","isNaN","Unresolved","resolved","dateComponents","afternoon","madhab","tomorrowSunrise","night","Number","hourAngle","fajrAngle","method","latitude","safeFajr","seasonAdjustedMorningTwilight","portion","nightPortions","fajr","getTime","ishaInterval","ishaAngle","safeIsha","seasonAdjustedEveningTwilight","shafaq","isha","maghribAngle","angleBasedMaghrib","fajrAdjustment","adjustments","methodAdjustments","sunriseAdjustment","dhuhrAdjustment","dhuhr","asrAdjustment","asr","maghribAdjustment","maghrib","ishaAdjustment","rounding","timeForPrayer","prayer","Fajr","Sunrise","Dhuhr","Asr","Maghrib","Isha","currentPrayer","Date","None","nextPrayer"],"sources":["C:\\Users\\Rashid\\muslim-daily\\frontend\\node_modules\\adhan\\src\\PrayerTimes.ts"],"sourcesContent":["import SolarTime from './SolarTime';\nimport TimeComponents from './TimeComponents';\nimport Prayer from './Prayer';\nimport Astronomical from './Astronomical';\nimport CalculationParameters from './CalculationParameters';\nimport Coordinates from './Coordinates';\nimport {\n  dateByAddingDays,\n  dateByAddingMinutes,\n  dateByAddingSeconds,\n  dayOfYear,\n  isValidDate,\n  roundedMinute,\n} from './DateUtils';\nimport { shadowLength } from './Madhab';\nimport {\n  PolarCircleResolution,\n  polarCircleResolvedValues,\n} from './PolarCircleResolution';\nimport { ValueOf } from './TypeUtils';\n\nexport default class PrayerTimes {\n  fajr: Date;\n  sunrise: Date;\n  dhuhr: Date;\n  asr: Date;\n  sunset: Date;\n  maghrib: Date;\n  isha: Date;\n\n  // eslint-disable-next-line complexity\n  constructor(\n    public coordinates: Coordinates,\n    public date: Date,\n    public calculationParameters: CalculationParameters,\n  ) {\n    let solarTime = new SolarTime(date, coordinates);\n\n    let fajrTime: Date;\n    let sunriseTime: Date;\n    let dhuhrTime: Date;\n    let asrTime: Date;\n    let sunsetTime: Date;\n    let maghribTime: Date;\n    let ishaTime: Date;\n\n    let nightFraction;\n\n    dhuhrTime = new TimeComponents(solarTime.transit).utcDate(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n    );\n    sunriseTime = new TimeComponents(solarTime.sunrise).utcDate(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n    );\n    sunsetTime = new TimeComponents(solarTime.sunset).utcDate(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate(),\n    );\n    const tomorrow = dateByAddingDays(date, 1);\n    let tomorrowSolarTime = new SolarTime(tomorrow, coordinates);\n\n    const polarCircleResolver = calculationParameters.polarCircleResolution;\n    if (\n      (!isValidDate(sunriseTime) ||\n        !isValidDate(sunsetTime) ||\n        isNaN(tomorrowSolarTime.sunrise)) &&\n      polarCircleResolver !== PolarCircleResolution.Unresolved\n    ) {\n      const resolved = polarCircleResolvedValues(\n        polarCircleResolver,\n        date,\n        coordinates,\n      );\n      solarTime = resolved.solarTime;\n      tomorrowSolarTime = resolved.tomorrowSolarTime;\n      const dateComponents = [\n        date.getFullYear(),\n        date.getMonth(),\n        date.getDate(),\n      ] as const;\n\n      dhuhrTime = new TimeComponents(solarTime.transit).utcDate(\n        ...dateComponents,\n      );\n      sunriseTime = new TimeComponents(solarTime.sunrise).utcDate(\n        ...dateComponents,\n      );\n      sunsetTime = new TimeComponents(solarTime.sunset).utcDate(\n        ...dateComponents,\n      );\n    }\n\n    // eslint-disable-next-line prefer-const\n    asrTime = new TimeComponents(\n      solarTime.afternoon(shadowLength(calculationParameters.madhab)),\n    ).utcDate(date.getFullYear(), date.getMonth(), date.getDate());\n\n    const tomorrowSunrise = new TimeComponents(\n      tomorrowSolarTime.sunrise,\n    ).utcDate(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate());\n    const night = (Number(tomorrowSunrise) - Number(sunsetTime)) / 1000;\n\n    fajrTime = new TimeComponents(\n      solarTime.hourAngle(-1 * calculationParameters.fajrAngle, false),\n    ).utcDate(date.getFullYear(), date.getMonth(), date.getDate());\n\n    // special case for moonsighting committee above latitude 55\n    if (\n      calculationParameters.method === 'MoonsightingCommittee' &&\n      coordinates.latitude >= 55\n    ) {\n      nightFraction = night / 7;\n      fajrTime = dateByAddingSeconds(sunriseTime, -nightFraction);\n    }\n\n    const safeFajr = (function () {\n      if (calculationParameters.method === 'MoonsightingCommittee') {\n        return Astronomical.seasonAdjustedMorningTwilight(\n          coordinates.latitude,\n          dayOfYear(date),\n          date.getFullYear(),\n          sunriseTime,\n        );\n      } else {\n        const portion = calculationParameters.nightPortions().fajr;\n        nightFraction = portion * night;\n        return dateByAddingSeconds(sunriseTime, -nightFraction);\n      }\n    })();\n\n    if (isNaN(fajrTime.getTime()) || safeFajr > fajrTime) {\n      fajrTime = safeFajr;\n    }\n\n    if (calculationParameters.ishaInterval > 0) {\n      ishaTime = dateByAddingMinutes(\n        sunsetTime,\n        calculationParameters.ishaInterval,\n      );\n    } else {\n      ishaTime = new TimeComponents(\n        solarTime.hourAngle(-1 * calculationParameters.ishaAngle, true),\n      ).utcDate(date.getFullYear(), date.getMonth(), date.getDate());\n\n      // special case for moonsighting committee above latitude 55\n      if (\n        calculationParameters.method === 'MoonsightingCommittee' &&\n        coordinates.latitude >= 55\n      ) {\n        nightFraction = night / 7;\n        ishaTime = dateByAddingSeconds(sunsetTime, nightFraction);\n      }\n\n      const safeIsha = (function () {\n        if (calculationParameters.method === 'MoonsightingCommittee') {\n          return Astronomical.seasonAdjustedEveningTwilight(\n            coordinates.latitude,\n            dayOfYear(date),\n            date.getFullYear(),\n            sunsetTime,\n            calculationParameters.shafaq,\n          );\n        } else {\n          const portion = calculationParameters.nightPortions().isha;\n          nightFraction = portion * night;\n          return dateByAddingSeconds(sunsetTime, nightFraction);\n        }\n      })();\n\n      if (isNaN(ishaTime.getTime()) || safeIsha < ishaTime) {\n        ishaTime = safeIsha;\n      }\n    }\n\n    maghribTime = sunsetTime;\n    if (calculationParameters.maghribAngle) {\n      const angleBasedMaghrib = new TimeComponents(\n        solarTime.hourAngle(-1 * calculationParameters.maghribAngle, true),\n      ).utcDate(date.getFullYear(), date.getMonth(), date.getDate());\n      if (sunsetTime < angleBasedMaghrib && ishaTime > angleBasedMaghrib) {\n        maghribTime = angleBasedMaghrib;\n      }\n    }\n\n    const fajrAdjustment =\n      (calculationParameters.adjustments.fajr || 0) +\n      (calculationParameters.methodAdjustments.fajr || 0);\n    const sunriseAdjustment =\n      (calculationParameters.adjustments.sunrise || 0) +\n      (calculationParameters.methodAdjustments.sunrise || 0);\n    const dhuhrAdjustment =\n      (calculationParameters.adjustments.dhuhr || 0) +\n      (calculationParameters.methodAdjustments.dhuhr || 0);\n    const asrAdjustment =\n      (calculationParameters.adjustments.asr || 0) +\n      (calculationParameters.methodAdjustments.asr || 0);\n    const maghribAdjustment =\n      (calculationParameters.adjustments.maghrib || 0) +\n      (calculationParameters.methodAdjustments.maghrib || 0);\n    const ishaAdjustment =\n      (calculationParameters.adjustments.isha || 0) +\n      (calculationParameters.methodAdjustments.isha || 0);\n\n    this.fajr = roundedMinute(\n      dateByAddingMinutes(fajrTime, fajrAdjustment),\n      calculationParameters.rounding,\n    );\n    this.sunrise = roundedMinute(\n      dateByAddingMinutes(sunriseTime, sunriseAdjustment),\n      calculationParameters.rounding,\n    );\n    this.dhuhr = roundedMinute(\n      dateByAddingMinutes(dhuhrTime, dhuhrAdjustment),\n      calculationParameters.rounding,\n    );\n    this.asr = roundedMinute(\n      dateByAddingMinutes(asrTime, asrAdjustment),\n      calculationParameters.rounding,\n    );\n    this.sunset = roundedMinute(sunsetTime, calculationParameters.rounding);\n    this.maghrib = roundedMinute(\n      dateByAddingMinutes(maghribTime, maghribAdjustment),\n      calculationParameters.rounding,\n    );\n    this.isha = roundedMinute(\n      dateByAddingMinutes(ishaTime, ishaAdjustment),\n      calculationParameters.rounding,\n    );\n  }\n\n  timeForPrayer(prayer: ValueOf<typeof Prayer>) {\n    if (prayer === Prayer.Fajr) {\n      return this.fajr;\n    } else if (prayer === Prayer.Sunrise) {\n      return this.sunrise;\n    } else if (prayer === Prayer.Dhuhr) {\n      return this.dhuhr;\n    } else if (prayer === Prayer.Asr) {\n      return this.asr;\n    } else if (prayer === Prayer.Maghrib) {\n      return this.maghrib;\n    } else if (prayer === Prayer.Isha) {\n      return this.isha;\n    } else {\n      return null;\n    }\n  }\n\n  currentPrayer(date = new Date()) {\n    if (date >= this.isha) {\n      return Prayer.Isha;\n    } else if (date >= this.maghrib) {\n      return Prayer.Maghrib;\n    } else if (date >= this.asr) {\n      return Prayer.Asr;\n    } else if (date >= this.dhuhr) {\n      return Prayer.Dhuhr;\n    } else if (date >= this.sunrise) {\n      return Prayer.Sunrise;\n    } else if (date >= this.fajr) {\n      return Prayer.Fajr;\n    } else {\n      return Prayer.None;\n    }\n  }\n\n  nextPrayer(date = new Date()) {\n    if (date >= this.isha) {\n      return Prayer.None;\n    } else if (date >= this.maghrib) {\n      return Prayer.Isha;\n    } else if (date >= this.asr) {\n      return Prayer.Maghrib;\n    } else if (date >= this.dhuhr) {\n      return Prayer.Asr;\n    } else if (date >= this.sunrise) {\n      return Prayer.Dhuhr;\n    } else if (date >= this.fajr) {\n      return Prayer.Sunrise;\n    } else {\n      return Prayer.Fajr;\n    }\n  }\n}\n"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAGA,SACEC,gBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,SAJF,EAKEC,WALF,EAMEC,aANF,QAOO,aAPP;AAQA,SAASC,YAAT,QAA6B,UAA7B;AACA,SACEC,qBADF,EAEEC,yBAFF,QAGO,yBAHP;AAMA,eAAe,MAAMC,WAAN,CAAkB;EAS/B;EACAC,WAAWA,CACFC,WADE,EAEFC,IAFE,EAGFC,qBAHE,EAIT;IAAA,KAHOF,WAGP,GAHOA,WAGP;IAAA,KAFOC,IAEP,GAFOA,IAEP;IAAA,KADOC,qBACP,GADOA,qBACP;IACA,IAAIC,SAAS,GAAG,IAAIlB,SAAJ,CAAcgB,IAAd,EAAoBD,WAApB,CAAhB;IAEA,IAAII,QAAJ;IACA,IAAIC,WAAJ;IACA,IAAIC,SAAJ;IACA,IAAIC,OAAJ;IACA,IAAIC,UAAJ;IACA,IAAIC,WAAJ;IACA,IAAIC,QAAJ;IAEA,IAAIC,aAAJ;IAEAL,SAAS,GAAG,IAAIpB,cAAJ,CAAmBiB,SAAS,CAACS,OAA7B,EAAsCC,OAAtC,CACVZ,IAAI,CAACa,WAAL,EADU,EAEVb,IAAI,CAACc,QAAL,EAFU,EAGVd,IAAI,CAACe,OAAL,EAHU,CAAZ;IAKAX,WAAW,GAAG,IAAInB,cAAJ,CAAmBiB,SAAS,CAACc,OAA7B,EAAsCJ,OAAtC,CACZZ,IAAI,CAACa,WAAL,EADY,EAEZb,IAAI,CAACc,QAAL,EAFY,EAGZd,IAAI,CAACe,OAAL,EAHY,CAAd;IAKAR,UAAU,GAAG,IAAItB,cAAJ,CAAmBiB,SAAS,CAACe,MAA7B,EAAqCL,OAArC,CACXZ,IAAI,CAACa,WAAL,EADW,EAEXb,IAAI,CAACc,QAAL,EAFW,EAGXd,IAAI,CAACe,OAAL,EAHW,CAAb;IAKA,MAAMG,QAAQ,GAAG9B,gBAAgB,CAACY,IAAD,EAAO,CAAP,CAAjC;IACA,IAAImB,iBAAiB,GAAG,IAAInC,SAAJ,CAAckC,QAAd,EAAwBnB,WAAxB,CAAxB;IAEA,MAAMqB,mBAAmB,GAAGnB,qBAAqB,CAACoB,qBAAlD;IACA,IACE,CAAC,CAAC7B,WAAW,CAACY,WAAD,CAAZ,IACC,CAACZ,WAAW,CAACe,UAAD,CADb,IAECe,KAAK,CAACH,iBAAiB,CAACH,OAAnB,CAFP,KAGAI,mBAAmB,KAAKzB,qBAAqB,CAAC4B,UAJhD,EAKE;MACA,MAAMC,QAAQ,GAAG5B,yBAAyB,CACxCwB,mBADwC,EAExCpB,IAFwC,EAGxCD,WAHwC,CAA1C;MAKAG,SAAS,GAAGsB,QAAQ,CAACtB,SAArB;MACAiB,iBAAiB,GAAGK,QAAQ,CAACL,iBAA7B;MACA,MAAMM,cAAc,GAAG,CACrBzB,IAAI,CAACa,WAAL,EADqB,EAErBb,IAAI,CAACc,QAAL,EAFqB,EAGrBd,IAAI,CAACe,OAAL,EAHqB,CAAvB;MAMAV,SAAS,GAAG,IAAIpB,cAAJ,CAAmBiB,SAAS,CAACS,OAA7B,EAAsCC,OAAtC,CACV,GAAGa,cADO,CAAZ;MAGArB,WAAW,GAAG,IAAInB,cAAJ,CAAmBiB,SAAS,CAACc,OAA7B,EAAsCJ,OAAtC,CACZ,GAAGa,cADS,CAAd;MAGAlB,UAAU,GAAG,IAAItB,cAAJ,CAAmBiB,SAAS,CAACe,MAA7B,EAAqCL,OAArC,CACX,GAAGa,cADQ,CAAb;IAGD,CA5DD,CA8DA;;IACAnB,OAAO,GAAG,IAAIrB,cAAJ,CACRiB,SAAS,CAACwB,SAAV,CAAoBhC,YAAY,CAACO,qBAAqB,CAAC0B,MAAvB,CAAhC,CADQ,EAERf,OAFQ,CAEAZ,IAAI,CAACa,WAAL,EAFA,EAEoBb,IAAI,CAACc,QAAL,EAFpB,EAEqCd,IAAI,CAACe,OAAL,EAFrC,CAAV;IAIA,MAAMa,eAAe,GAAG,IAAI3C,cAAJ,CACtBkC,iBAAiB,CAACH,OADI,EAEtBJ,OAFsB,CAEdM,QAAQ,CAACL,WAAT,EAFc,EAEUK,QAAQ,CAACJ,QAAT,EAFV,EAE+BI,QAAQ,CAACH,OAAT,EAF/B,CAAxB;IAGA,MAAMc,KAAK,GAAG,CAACC,MAAM,CAACF,eAAD,CAAN,GAA0BE,MAAM,CAACvB,UAAD,CAAjC,IAAiD,IAA/D;IAEAJ,QAAQ,GAAG,IAAIlB,cAAJ,CACTiB,SAAS,CAAC6B,SAAV,CAAoB,CAAC,CAAD,GAAK9B,qBAAqB,CAAC+B,SAA/C,EAA0D,KAA1D,CADS,EAETpB,OAFS,CAEDZ,IAAI,CAACa,WAAL,EAFC,EAEmBb,IAAI,CAACc,QAAL,EAFnB,EAEoCd,IAAI,CAACe,OAAL,EAFpC,CAAX,CAxEA,CA4EA;;IACA,IACEd,qBAAqB,CAACgC,MAAtB,KAAiC,uBAAjC,IACAlC,WAAW,CAACmC,QAAZ,IAAwB,EAF1B,EAGE;MACAxB,aAAa,GAAGmB,KAAK,GAAG,CAAxB;MACA1B,QAAQ,GAAGb,mBAAmB,CAACc,WAAD,EAAc,CAACM,aAAf,CAA9B;IACD;IAED,MAAMyB,QAAQ,GAAI,YAAY;MAC5B,IAAIlC,qBAAqB,CAACgC,MAAtB,KAAiC,uBAArC,EAA8D;QAC5D,OAAO9C,YAAY,CAACiD,6BAAb,CACLrC,WAAW,CAACmC,QADP,EAEL3C,SAAS,CAACS,IAAD,CAFJ,EAGLA,IAAI,CAACa,WAAL,EAHK,EAILT,WAJK,CAAP;MAMD,CAPD,MAOO;QACL,MAAMiC,OAAO,GAAGpC,qBAAqB,CAACqC,aAAtB,GAAsCC,IAAtD;QACA7B,aAAa,GAAG2B,OAAO,GAAGR,KAA1B;QACA,OAAOvC,mBAAmB,CAACc,WAAD,EAAc,CAACM,aAAf,CAA1B;MACD;IACF,CAbgB,EAAjB;IAeA,IAAIY,KAAK,CAACnB,QAAQ,CAACqC,OAAT,EAAD,CAAL,IAA6BL,QAAQ,GAAGhC,QAA5C,EAAsD;MACpDA,QAAQ,GAAGgC,QAAX;IACD;IAED,IAAIlC,qBAAqB,CAACwC,YAAtB,GAAqC,CAAzC,EAA4C;MAC1ChC,QAAQ,GAAGpB,mBAAmB,CAC5BkB,UAD4B,EAE5BN,qBAAqB,CAACwC,YAFM,CAA9B;IAID,CALD,MAKO;MACLhC,QAAQ,GAAG,IAAIxB,cAAJ,CACTiB,SAAS,CAAC6B,SAAV,CAAoB,CAAC,CAAD,GAAK9B,qBAAqB,CAACyC,SAA/C,EAA0D,IAA1D,CADS,EAET9B,OAFS,CAEDZ,IAAI,CAACa,WAAL,EAFC,EAEmBb,IAAI,CAACc,QAAL,EAFnB,EAEoCd,IAAI,CAACe,OAAL,EAFpC,CAAX,CADK,CAKL;;MACA,IACEd,qBAAqB,CAACgC,MAAtB,KAAiC,uBAAjC,IACAlC,WAAW,CAACmC,QAAZ,IAAwB,EAF1B,EAGE;QACAxB,aAAa,GAAGmB,KAAK,GAAG,CAAxB;QACApB,QAAQ,GAAGnB,mBAAmB,CAACiB,UAAD,EAAaG,aAAb,CAA9B;MACD;MAED,MAAMiC,QAAQ,GAAI,YAAY;QAC5B,IAAI1C,qBAAqB,CAACgC,MAAtB,KAAiC,uBAArC,EAA8D;UAC5D,OAAO9C,YAAY,CAACyD,6BAAb,CACL7C,WAAW,CAACmC,QADP,EAEL3C,SAAS,CAACS,IAAD,CAFJ,EAGLA,IAAI,CAACa,WAAL,EAHK,EAILN,UAJK,EAKLN,qBAAqB,CAAC4C,MALjB,CAAP;QAOD,CARD,MAQO;UACL,MAAMR,OAAO,GAAGpC,qBAAqB,CAACqC,aAAtB,GAAsCQ,IAAtD;UACApC,aAAa,GAAG2B,OAAO,GAAGR,KAA1B;UACA,OAAOvC,mBAAmB,CAACiB,UAAD,EAAaG,aAAb,CAA1B;QACD;MACF,CAdgB,EAAjB;MAgBA,IAAIY,KAAK,CAACb,QAAQ,CAAC+B,OAAT,EAAD,CAAL,IAA6BG,QAAQ,GAAGlC,QAA5C,EAAsD;QACpDA,QAAQ,GAAGkC,QAAX;MACD;IACF;IAEDnC,WAAW,GAAGD,UAAd;IACA,IAAIN,qBAAqB,CAAC8C,YAA1B,EAAwC;MACtC,MAAMC,iBAAiB,GAAG,IAAI/D,cAAJ,CACxBiB,SAAS,CAAC6B,SAAV,CAAoB,CAAC,CAAD,GAAK9B,qBAAqB,CAAC8C,YAA/C,EAA6D,IAA7D,CADwB,EAExBnC,OAFwB,CAEhBZ,IAAI,CAACa,WAAL,EAFgB,EAEIb,IAAI,CAACc,QAAL,EAFJ,EAEqBd,IAAI,CAACe,OAAL,EAFrB,CAA1B;MAGA,IAAIR,UAAU,GAAGyC,iBAAb,IAAkCvC,QAAQ,GAAGuC,iBAAjD,EAAoE;QAClExC,WAAW,GAAGwC,iBAAd;MACD;IACF;IAED,MAAMC,cAAc,GAClB,CAAChD,qBAAqB,CAACiD,WAAtB,CAAkCX,IAAlC,IAA0C,CAA3C,KACCtC,qBAAqB,CAACkD,iBAAtB,CAAwCZ,IAAxC,IAAgD,CADjD,CADF;IAGA,MAAMa,iBAAiB,GACrB,CAACnD,qBAAqB,CAACiD,WAAtB,CAAkClC,OAAlC,IAA6C,CAA9C,KACCf,qBAAqB,CAACkD,iBAAtB,CAAwCnC,OAAxC,IAAmD,CADpD,CADF;IAGA,MAAMqC,eAAe,GACnB,CAACpD,qBAAqB,CAACiD,WAAtB,CAAkCI,KAAlC,IAA2C,CAA5C,KACCrD,qBAAqB,CAACkD,iBAAtB,CAAwCG,KAAxC,IAAiD,CADlD,CADF;IAGA,MAAMC,aAAa,GACjB,CAACtD,qBAAqB,CAACiD,WAAtB,CAAkCM,GAAlC,IAAyC,CAA1C,KACCvD,qBAAqB,CAACkD,iBAAtB,CAAwCK,GAAxC,IAA+C,CADhD,CADF;IAGA,MAAMC,iBAAiB,GACrB,CAACxD,qBAAqB,CAACiD,WAAtB,CAAkCQ,OAAlC,IAA6C,CAA9C,KACCzD,qBAAqB,CAACkD,iBAAtB,CAAwCO,OAAxC,IAAmD,CADpD,CADF;IAGA,MAAMC,cAAc,GAClB,CAAC1D,qBAAqB,CAACiD,WAAtB,CAAkCJ,IAAlC,IAA0C,CAA3C,KACC7C,qBAAqB,CAACkD,iBAAtB,CAAwCL,IAAxC,IAAgD,CADjD,CADF;IAIA,KAAKP,IAAL,GAAY9C,aAAa,CACvBJ,mBAAmB,CAACc,QAAD,EAAW8C,cAAX,CADI,EAEvBhD,qBAAqB,CAAC2D,QAFC,CAAzB;IAIA,KAAK5C,OAAL,GAAevB,aAAa,CAC1BJ,mBAAmB,CAACe,WAAD,EAAcgD,iBAAd,CADO,EAE1BnD,qBAAqB,CAAC2D,QAFI,CAA5B;IAIA,KAAKN,KAAL,GAAa7D,aAAa,CACxBJ,mBAAmB,CAACgB,SAAD,EAAYgD,eAAZ,CADK,EAExBpD,qBAAqB,CAAC2D,QAFE,CAA1B;IAIA,KAAKJ,GAAL,GAAW/D,aAAa,CACtBJ,mBAAmB,CAACiB,OAAD,EAAUiD,aAAV,CADG,EAEtBtD,qBAAqB,CAAC2D,QAFA,CAAxB;IAIA,KAAK3C,MAAL,GAAcxB,aAAa,CAACc,UAAD,EAAaN,qBAAqB,CAAC2D,QAAnC,CAA3B;IACA,KAAKF,OAAL,GAAejE,aAAa,CAC1BJ,mBAAmB,CAACmB,WAAD,EAAciD,iBAAd,CADO,EAE1BxD,qBAAqB,CAAC2D,QAFI,CAA5B;IAIA,KAAKd,IAAL,GAAYrD,aAAa,CACvBJ,mBAAmB,CAACoB,QAAD,EAAWkD,cAAX,CADI,EAEvB1D,qBAAqB,CAAC2D,QAFC,CAAzB;EAID;EAEDC,aAAaA,CAACC,MAAD,EAAiC;IAC5C,IAAIA,MAAM,KAAK5E,MAAM,CAAC6E,IAAtB,EAA4B;MAC1B,OAAO,KAAKxB,IAAZ;IACD,CAFD,MAEO,IAAIuB,MAAM,KAAK5E,MAAM,CAAC8E,OAAtB,EAA+B;MACpC,OAAO,KAAKhD,OAAZ;IACD,CAFM,MAEA,IAAI8C,MAAM,KAAK5E,MAAM,CAAC+E,KAAtB,EAA6B;MAClC,OAAO,KAAKX,KAAZ;IACD,CAFM,MAEA,IAAIQ,MAAM,KAAK5E,MAAM,CAACgF,GAAtB,EAA2B;MAChC,OAAO,KAAKV,GAAZ;IACD,CAFM,MAEA,IAAIM,MAAM,KAAK5E,MAAM,CAACiF,OAAtB,EAA+B;MACpC,OAAO,KAAKT,OAAZ;IACD,CAFM,MAEA,IAAII,MAAM,KAAK5E,MAAM,CAACkF,IAAtB,EAA4B;MACjC,OAAO,KAAKtB,IAAZ;IACD,CAFM,MAEA;MACL,OAAO,IAAP;IACD;EACF;EAEDuB,aAAaA,CAACrE,IAAI,GAAG,IAAIsE,IAAJ,EAAR,EAAoB;IAC/B,IAAItE,IAAI,IAAI,KAAK8C,IAAjB,EAAuB;MACrB,OAAO5D,MAAM,CAACkF,IAAd;IACD,CAFD,MAEO,IAAIpE,IAAI,IAAI,KAAK0D,OAAjB,EAA0B;MAC/B,OAAOxE,MAAM,CAACiF,OAAd;IACD,CAFM,MAEA,IAAInE,IAAI,IAAI,KAAKwD,GAAjB,EAAsB;MAC3B,OAAOtE,MAAM,CAACgF,GAAd;IACD,CAFM,MAEA,IAAIlE,IAAI,IAAI,KAAKsD,KAAjB,EAAwB;MAC7B,OAAOpE,MAAM,CAAC+E,KAAd;IACD,CAFM,MAEA,IAAIjE,IAAI,IAAI,KAAKgB,OAAjB,EAA0B;MAC/B,OAAO9B,MAAM,CAAC8E,OAAd;IACD,CAFM,MAEA,IAAIhE,IAAI,IAAI,KAAKuC,IAAjB,EAAuB;MAC5B,OAAOrD,MAAM,CAAC6E,IAAd;IACD,CAFM,MAEA;MACL,OAAO7E,MAAM,CAACqF,IAAd;IACD;EACF;EAEDC,UAAUA,CAACxE,IAAI,GAAG,IAAIsE,IAAJ,EAAR,EAAoB;IAC5B,IAAItE,IAAI,IAAI,KAAK8C,IAAjB,EAAuB;MACrB,OAAO5D,MAAM,CAACqF,IAAd;IACD,CAFD,MAEO,IAAIvE,IAAI,IAAI,KAAK0D,OAAjB,EAA0B;MAC/B,OAAOxE,MAAM,CAACkF,IAAd;IACD,CAFM,MAEA,IAAIpE,IAAI,IAAI,KAAKwD,GAAjB,EAAsB;MAC3B,OAAOtE,MAAM,CAACiF,OAAd;IACD,CAFM,MAEA,IAAInE,IAAI,IAAI,KAAKsD,KAAjB,EAAwB;MAC7B,OAAOpE,MAAM,CAACgF,GAAd;IACD,CAFM,MAEA,IAAIlE,IAAI,IAAI,KAAKgB,OAAjB,EAA0B;MAC/B,OAAO9B,MAAM,CAAC+E,KAAd;IACD,CAFM,MAEA,IAAIjE,IAAI,IAAI,KAAKuC,IAAjB,EAAuB;MAC5B,OAAOrD,MAAM,CAAC8E,OAAd;IACD,CAFM,MAEA;MACL,OAAO9E,MAAM,CAAC6E,IAAd;IACD;EACF;AA1Q8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}