{"ast":null,"code":"import { CalculationMethod, PrayerTimes, Coordinates } from 'adhan';\n\n// Malaysia calculation parameters\nconst getCalculationParams = () => {\n  const params = CalculationMethod.MuslimWorldLeague();\n  params.madhab = 'Shafi'; // Mazhab Syafie for Malaysia\n  params.highLatitudeRule = 'TwilightAngle';\n  params.fajrAngle = 20;\n  params.ishaAngle = 18;\n  return params;\n};\n\n// Format time to 12-hour format\nconst formatTime = date => {\n  return date.toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true\n  });\n};\n\n// Calculate prayer times for given coordinates and date\nexport const calculatePrayerTimes = (latitude, longitude, date = new Date()) => {\n  try {\n    const coordinates = new Coordinates(latitude, longitude);\n    const params = getCalculationParams();\n    const prayerTimes = new PrayerTimes(coordinates, date, params);\n    return {\n      fajr: formatTime(prayerTimes.fajr),\n      sunrise: formatTime(prayerTimes.sunrise),\n      dhuhr: formatTime(prayerTimes.dhuhr),\n      asr: formatTime(prayerTimes.asr),\n      maghrib: formatTime(prayerTimes.maghrib),\n      isha: formatTime(prayerTimes.isha),\n      method: 'Muslim World League (Mazhab Syafie)',\n      location: {\n        latitude,\n        longitude\n      },\n      date: date.toDateString(),\n      calculated: true,\n      success: true\n    };\n  } catch (error) {\n    console.error('Prayer time calculation error:', error);\n    return getFallbackTimes();\n  }\n};\n\n// Fallback times for Kuala Lumpur\nconst getFallbackTimes = () => {\n  return {\n    fajr: '5:45 AM',\n    sunrise: '7:10 AM',\n    dhuhr: '1:15 PM',\n    asr: '4:30 PM',\n    maghrib: '7:05 PM',\n    isha: '8:20 PM',\n    method: 'Fallback (Kuala Lumpur)',\n    location: {\n      latitude: 3.1390,\n      longitude: 101.6869\n    },\n    date: new Date().toDateString(),\n    calculated: false,\n    success: true,\n    note: 'Using default Kuala Lumpur times'\n  };\n};\n\n// Major Malaysian cities coordinates\nexport const malaysianCities = {\n  'Kuala Lumpur': {\n    lat: 3.1390,\n    lng: 101.6869\n  },\n  'Johor Bahru': {\n    lat: 1.4927,\n    lng: 103.7414\n  },\n  'Penang': {\n    lat: 5.4141,\n    lng: 100.3288\n  },\n  'Ipoh': {\n    lat: 4.5975,\n    lng: 101.0901\n  },\n  'Klang': {\n    lat: 3.0449,\n    lng: 101.4456\n  },\n  'Kota Bharu': {\n    lat: 6.1254,\n    lng: 102.2381\n  },\n  'Kuala Terengganu': {\n    lat: 5.3296,\n    lng: 103.1370\n  },\n  'Kuantan': {\n    lat: 3.8167,\n    lng: 103.3333\n  },\n  'Malacca': {\n    lat: 2.1896,\n    lng: 102.2501\n  },\n  'Seremban': {\n    lat: 2.7259,\n    lng: 101.9378\n  },\n  'Shah Alam': {\n    lat: 3.0733,\n    lng: 101.5185\n  },\n  'Petaling Jaya': {\n    lat: 3.1073,\n    lng: 101.6067\n  }\n};\n\n// Get user's current location\nexport const getCurrentLocation = () => {\n  return new Promise((resolve, reject) => {\n    if (!navigator.geolocation) {\n      reject(new Error('Geolocation not supported'));\n      return;\n    }\n    navigator.geolocation.getCurrentPosition(position => {\n      resolve({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude,\n        accuracy: position.coords.accuracy\n      });\n    }, error => {\n      reject(error);\n    }, {\n      enableHighAccuracy: false,\n      timeout: 10000,\n      maximumAge: 600000 // 10 minutes\n    });\n  });\n};\n\n// Get next prayer\nexport const getNextPrayer = prayerTimes => {\n  const now = new Date();\n  const prayers = [{\n    name: 'Fajr',\n    time: prayerTimes.fajr\n  }, {\n    name: 'Dhuhr',\n    time: prayerTimes.dhuhr\n  }, {\n    name: 'Asr',\n    time: prayerTimes.asr\n  }, {\n    name: 'Maghrib',\n    time: prayerTimes.maghrib\n  }, {\n    name: 'Isha',\n    time: prayerTimes.isha\n  }];\n  for (let prayer of prayers) {\n    const prayerTime = new Date();\n    const [time, modifier] = prayer.time.split(' ');\n    let [hours, minutes] = time.split(':');\n    hours = parseInt(hours);\n    minutes = parseInt(minutes);\n    if (modifier === 'PM' && hours < 12) hours += 12;\n    if (modifier === 'AM' && hours === 12) hours = 0;\n    prayerTime.setHours(hours, minutes, 0, 0);\n    if (prayerTime > now) {\n      return {\n        name: prayer.name,\n        time: prayer.time,\n        timeObject: prayerTime\n      };\n    }\n  }\n\n  // If all prayers passed, return first prayer of next day\n  return {\n    name: 'Fajr',\n    time: prayerTimes.fajr,\n    timeObject: new Date(now.getTime() + 24 * 60 * 60 * 1000),\n    // Tomorrow\n    isTomorrow: true\n  };\n};","map":{"version":3,"names":["CalculationMethod","PrayerTimes","Coordinates","getCalculationParams","params","MuslimWorldLeague","madhab","highLatitudeRule","fajrAngle","ishaAngle","formatTime","date","toLocaleTimeString","hour","minute","hour12","calculatePrayerTimes","latitude","longitude","Date","coordinates","prayerTimes","fajr","sunrise","dhuhr","asr","maghrib","isha","method","location","toDateString","calculated","success","error","console","getFallbackTimes","note","malaysianCities","lat","lng","getCurrentLocation","Promise","resolve","reject","navigator","geolocation","Error","getCurrentPosition","position","coords","accuracy","enableHighAccuracy","timeout","maximumAge","getNextPrayer","now","prayers","name","time","prayer","prayerTime","modifier","split","hours","minutes","parseInt","setHours","timeObject","getTime","isTomorrow"],"sources":["C:/Users/Rashid/muslim-daily/frontend/src/utils/prayerTimes.js"],"sourcesContent":["import { CalculationMethod, PrayerTimes, Coordinates } from 'adhan';\r\n\r\n// Malaysia calculation parameters\r\nconst getCalculationParams = () => {\r\n  const params = CalculationMethod.MuslimWorldLeague();\r\n  params.madhab = 'Shafi'; // Mazhab Syafie for Malaysia\r\n  params.highLatitudeRule = 'TwilightAngle';\r\n  params.fajrAngle = 20;\r\n  params.ishaAngle = 18;\r\n  return params;\r\n};\r\n\r\n// Format time to 12-hour format\r\nconst formatTime = (date) => {\r\n  return date.toLocaleTimeString('en-US', {\r\n    hour: 'numeric',\r\n    minute: '2-digit',\r\n    hour12: true\r\n  });\r\n};\r\n\r\n// Calculate prayer times for given coordinates and date\r\nexport const calculatePrayerTimes = (latitude, longitude, date = new Date()) => {\r\n  try {\r\n    const coordinates = new Coordinates(latitude, longitude);\r\n    const params = getCalculationParams();\r\n    \r\n    const prayerTimes = new PrayerTimes(coordinates, date, params);\r\n    \r\n    return {\r\n      fajr: formatTime(prayerTimes.fajr),\r\n      sunrise: formatTime(prayerTimes.sunrise),\r\n      dhuhr: formatTime(prayerTimes.dhuhr),\r\n      asr: formatTime(prayerTimes.asr),\r\n      maghrib: formatTime(prayerTimes.maghrib),\r\n      isha: formatTime(prayerTimes.isha),\r\n      method: 'Muslim World League (Mazhab Syafie)',\r\n      location: { latitude, longitude },\r\n      date: date.toDateString(),\r\n      calculated: true,\r\n      success: true\r\n    };\r\n  } catch (error) {\r\n    console.error('Prayer time calculation error:', error);\r\n    return getFallbackTimes();\r\n  }\r\n};\r\n\r\n// Fallback times for Kuala Lumpur\r\nconst getFallbackTimes = () => {\r\n  return {\r\n    fajr: '5:45 AM',\r\n    sunrise: '7:10 AM',\r\n    dhuhr: '1:15 PM',\r\n    asr: '4:30 PM',\r\n    maghrib: '7:05 PM',\r\n    isha: '8:20 PM',\r\n    method: 'Fallback (Kuala Lumpur)',\r\n    location: { latitude: 3.1390, longitude: 101.6869 },\r\n    date: new Date().toDateString(),\r\n    calculated: false,\r\n    success: true,\r\n    note: 'Using default Kuala Lumpur times'\r\n  };\r\n};\r\n\r\n// Major Malaysian cities coordinates\r\nexport const malaysianCities = {\r\n  'Kuala Lumpur': { lat: 3.1390, lng: 101.6869 },\r\n  'Johor Bahru': { lat: 1.4927, lng: 103.7414 },\r\n  'Penang': { lat: 5.4141, lng: 100.3288 },\r\n  'Ipoh': { lat: 4.5975, lng: 101.0901 },\r\n  'Klang': { lat: 3.0449, lng: 101.4456 },\r\n  'Kota Bharu': { lat: 6.1254, lng: 102.2381 },\r\n  'Kuala Terengganu': { lat: 5.3296, lng: 103.1370 },\r\n  'Kuantan': { lat: 3.8167, lng: 103.3333 },\r\n  'Malacca': { lat: 2.1896, lng: 102.2501 },\r\n  'Seremban': { lat: 2.7259, lng: 101.9378 },\r\n  'Shah Alam': { lat: 3.0733, lng: 101.5185 },\r\n  'Petaling Jaya': { lat: 3.1073, lng: 101.6067 }\r\n};\r\n\r\n// Get user's current location\r\nexport const getCurrentLocation = () => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!navigator.geolocation) {\r\n      reject(new Error('Geolocation not supported'));\r\n      return;\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        resolve({\r\n          latitude: position.coords.latitude,\r\n          longitude: position.coords.longitude,\r\n          accuracy: position.coords.accuracy\r\n        });\r\n      },\r\n      (error) => {\r\n        reject(error);\r\n      },\r\n      {\r\n        enableHighAccuracy: false,\r\n        timeout: 10000,\r\n        maximumAge: 600000 // 10 minutes\r\n      }\r\n    );\r\n  });\r\n};\r\n\r\n// Get next prayer\r\nexport const getNextPrayer = (prayerTimes) => {\r\n  const now = new Date();\r\n  const prayers = [\r\n    { name: 'Fajr', time: prayerTimes.fajr },\r\n    { name: 'Dhuhr', time: prayerTimes.dhuhr },\r\n    { name: 'Asr', time: prayerTimes.asr },\r\n    { name: 'Maghrib', time: prayerTimes.maghrib },\r\n    { name: 'Isha', time: prayerTimes.isha }\r\n  ];\r\n\r\n  for (let prayer of prayers) {\r\n    const prayerTime = new Date();\r\n    const [time, modifier] = prayer.time.split(' ');\r\n    let [hours, minutes] = time.split(':');\r\n    \r\n    hours = parseInt(hours);\r\n    minutes = parseInt(minutes);\r\n    \r\n    if (modifier === 'PM' && hours < 12) hours += 12;\r\n    if (modifier === 'AM' && hours === 12) hours = 0;\r\n    \r\n    prayerTime.setHours(hours, minutes, 0, 0);\r\n    \r\n    if (prayerTime > now) {\r\n      return {\r\n        name: prayer.name,\r\n        time: prayer.time,\r\n        timeObject: prayerTime\r\n      };\r\n    }\r\n  }\r\n\r\n  // If all prayers passed, return first prayer of next day\r\n  return {\r\n    name: 'Fajr',\r\n    time: prayerTimes.fajr,\r\n    timeObject: new Date(now.getTime() + 24 * 60 * 60 * 1000), // Tomorrow\r\n    isTomorrow: true\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}